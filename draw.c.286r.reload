
;; Function draw_wireframe_triangle (draw_wireframe_triangle, funcdef_no=6, decl_uid=8745, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) q  (1) n {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) q  (1) n {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) q  (1) n {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 67: point = 0, n_alt = -1
  BB 2
   Insn 63: point = 0, n_alt = 0
   Insn 62: point = 0, n_alt = 0
   Insn 61: point = 0, n_alt = 3
   Insn 60: point = 0, n_alt = -2
   Insn 59: point = 1, n_alt = -2
   Insn 58: point = 2, n_alt = -2
   Insn 57: point = 3, n_alt = -2
   Insn 56: point = 4, n_alt = -2
   Insn 55: point = 5, n_alt = -2
   Insn 54: point = 6, n_alt = 0
   Insn 53: point = 7, n_alt = 0
   Insn 52: point = 8, n_alt = 0
   Insn 51: point = 8, n_alt = 3
   Insn 50: point = 9, n_alt = 0
   Insn 49: point = 10, n_alt = 0
   Insn 48: point = 11, n_alt = 0
   Insn 47: point = 12, n_alt = 0
   Insn 46: point = 13, n_alt = 0
   Insn 45: point = 14, n_alt = 0
   Insn 44: point = 14, n_alt = 0
   Insn 43: point = 14, n_alt = 3
   Insn 42: point = 14, n_alt = -2
   Insn 41: point = 15, n_alt = -2
   Insn 40: point = 16, n_alt = -2
   Insn 39: point = 17, n_alt = -2
   Insn 38: point = 18, n_alt = 0
   Insn 37: point = 18, n_alt = -2
   Insn 36: point = 19, n_alt = 0
   Insn 35: point = 20, n_alt = 0
   Insn 34: point = 21, n_alt = 0
   Insn 33: point = 21, n_alt = 3
   Insn 32: point = 22, n_alt = 0
   Insn 31: point = 23, n_alt = 0
   Insn 30: point = 24, n_alt = 0
   Insn 29: point = 25, n_alt = 0
   Insn 28: point = 26, n_alt = 0
   Insn 27: point = 26, n_alt = 0
   Insn 26: point = 26, n_alt = 3
   Insn 25: point = 26, n_alt = -2
   Insn 24: point = 27, n_alt = -2
   Insn 23: point = 28, n_alt = -2
   Insn 22: point = 29, n_alt = -2
   Insn 21: point = 30, n_alt = -2
   Insn 20: point = 31, n_alt = -2
   Insn 19: point = 32, n_alt = 0
   Insn 18: point = 33, n_alt = 0
   Insn 17: point = 34, n_alt = 0
   Insn 16: point = 34, n_alt = 3
   Insn 15: point = 35, n_alt = 0
   Insn 14: point = 36, n_alt = 0
   Insn 13: point = 37, n_alt = 0
   Insn 12: point = 38, n_alt = 0
   Insn 11: point = 39, n_alt = 0
   Insn 7: point = 40, n_alt = 1
   Insn 6: point = 40, n_alt = 1
   Insn 5: point = 40, n_alt = 1
   Insn 4: point = 40, n_alt = 1
   Insn 3: point = 40, n_alt = 1
   Insn 2: point = 40, n_alt = 5
 r82: [31..39]
 r83: [30..38]
 r84: [29..37]
 r85: [28..36]
 r86: [27..35]
 r87: [26..34]
 r88: [32..33]
 r89: [18..25]
 r90: [17..24]
 r91: [16..23]
 r92: [15..22]
 r93: [14..21]
 r94: [19..20]
 r95: [5..13]
 r96: [4..12]
 r97: [3..11]
 r98: [2..10]
 r99: [1..9]
 r100: [0..8]
 r101: [6..7]
Compressing live ranges: from 40 to 6 - 15%
Ranges after the compression:
 r82: [4..5]
 r83: [4..5]
 r84: [4..5]
 r85: [4..5]
 r86: [4..5]
 r87: [4..5]
 r88: [4..5]
 r89: [2..3]
 r90: [2..3]
 r91: [2..3]
 r92: [2..3]
 r93: [2..3]
 r94: [2..3]
 r95: [0..1]
 r96: [0..1]
 r97: [0..1]
 r98: [0..1]
 r99: [0..1]
 r100: [0..1]
 r101: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 20
changing reg in insn 12
changing reg in insn 21
changing reg in insn 13
changing reg in insn 22
changing reg in insn 14
changing reg in insn 23
changing reg in insn 15
changing reg in insn 24
changing reg in insn 16
changing reg in insn 25
changing reg in insn 18
changing reg in insn 19
changing reg in insn 29
changing reg in insn 37
changing reg in insn 30
changing reg in insn 39
changing reg in insn 31
changing reg in insn 40
changing reg in insn 32
changing reg in insn 41
changing reg in insn 33
changing reg in insn 42
changing reg in insn 35
changing reg in insn 36
changing reg in insn 46
changing reg in insn 55
changing reg in insn 47
changing reg in insn 56
changing reg in insn 48
changing reg in insn 57
changing reg in insn 49
changing reg in insn 58
changing reg in insn 50
changing reg in insn 59
changing reg in insn 51
changing reg in insn 60
changing reg in insn 53
changing reg in insn 54
deleting insn with uid = 20.
deleting insn with uid = 21.
deleting insn with uid = 22.
deleting insn with uid = 23.
deleting insn with uid = 24.
deleting insn with uid = 39.
deleting insn with uid = 40.
deleting insn with uid = 41.
deleting insn with uid = 55.
deleting insn with uid = 56.
deleting insn with uid = 57.
deleting insn with uid = 58.
deleting insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns


draw_wireframe_triangle

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={10d,6u} r1={7d,4u} r2={7d,4u} r4={7d,4u} r5={10d,7u} r6={1d,30u} r7={10d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={8d,5u} r37={7d,4u} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 351{262d,89u,0e} in 47{44 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])
        (reg:DI 5 di [ c ])) "draw.c":5:149 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])
        (reg:SI 4 si [ drawable ])) "draw.c":5:149 67 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])
        (reg:SI 1 dx [ gcontext ])) "draw.c":5:149 67 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x1+0 S4 A32])
        (reg:SI 2 cx [ x1 ])) "draw.c":5:149 67 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 y1+0 S4 A32])
        (reg:SI 36 r8 [ y1 ])) "draw.c":5:149 67 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 x2+0 S4 A32])
        (reg:SI 37 r9 [ x2 ])) "draw.c":5:149 67 {*movsi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:SI 37 r9 [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 x2+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 36 r8 [83])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 y1+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 cx [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x1+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 dx [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 4 si [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])) "draw.c":6:5 66 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":6:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 18 17 19 2 (set (reg:SI 5 di [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 19 18 25 2 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [2  S4 A32])
        (reg:SI 5 di [88])) "draw.c":6:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 25 19 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "draw.c":6:5 66 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "draw.c":6:5 69 {*movqi_internal}
     (nil))
(call_insn 27 26 28 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("draw_line") [flags 0x3]  <function_decl 0x7fa66ea82400 draw_line>) [0 draw_line S1 A8])
            (const_int 16 [0x10]))) "draw.c":6:5 754 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 36 r8))
                            (expr_list:SI (use (reg:SI 37 r9))
                                (nil)))))))))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":6:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 29 28 30 2 (set (reg:SI 36 r8 [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [2 x3+0 S4 A64])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 2 cx [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 x2+0 S4 A32])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 1 dx [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 4 si [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])) "draw.c":7:5 66 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":7:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 35 34 36 2 (set (reg:SI 5 di [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [2 y3+0 S4 A64])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [2  S4 A32])
        (reg:SI 5 di [94])) "draw.c":7:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 37 36 38 2 (set (reg:SI 37 r9)
        (reg:SI 36 r8 [89])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 38 37 42 2 (set (reg:SI 36 r8)
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 42 38 43 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "draw.c":7:5 66 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "draw.c":7:5 69 {*movqi_internal}
     (nil))
(call_insn 44 43 45 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("draw_line") [flags 0x3]  <function_decl 0x7fa66ea82400 draw_line>) [0 draw_line S1 A8])
            (const_int 16 [0x10]))) "draw.c":7:5 754 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 36 r8))
                            (expr_list:SI (use (reg:SI 37 r9))
                                (nil)))))))))
(insn 45 44 46 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":7:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 46 45 47 2 (set (reg:SI 37 r9 [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x1+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:SI 36 r8 [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [2 y3+0 S4 A64])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:SI 2 cx [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [2 x3+0 S4 A64])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:SI 1 dx [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:SI 4 si [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])) "draw.c":8:5 66 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":8:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 53 52 54 2 (set (reg:SI 5 di [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 y1+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 54 53 60 2 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [2  S4 A32])
        (reg:SI 5 di [101])) "draw.c":8:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 60 54 61 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "draw.c":8:5 66 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "draw.c":8:5 69 {*movqi_internal}
     (nil))
(call_insn 62 61 63 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("draw_line") [flags 0x3]  <function_decl 0x7fa66ea82400 draw_line>) [0 draw_line S1 A8])
            (const_int 16 [0x10]))) "draw.c":8:5 754 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 36 r8))
                            (expr_list:SI (use (reg:SI 37 r9))
                                (nil)))))))))
(insn 63 62 66 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":8:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 66 63 67 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 3 (const_int 0 [0]) "draw.c":9:1 773 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 68 67 0 NOTE_INSN_DELETED)

;; Function draw_line (draw_line, funcdef_no=7, decl_uid=8747, cgraph_uid=8, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=96, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=0,overall=12,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 13:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=155 from oldreg=95, assigning class GENERAL_REGS to r155
   13: {r155:SI=r155:SI>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  189: r155:SI=r82:SI
    Inserting insn reload after:
  190: r95:SI=r155:SI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=20,losers=2 -- refuse
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*xorsi_1}
      Creating newreg=156 from oldreg=82, assigning class GENERAL_REGS to r156
   14: {r156:SI=r156:SI^r95:SI;clobber flags:CC;}
      REG_DEAD r82:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  191: r156:SI=r82:SI
    Inserting insn reload after:
  192: r83:SI=r156:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=0,overall=12,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 18:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=157 from oldreg=97, assigning class GENERAL_REGS to r157
   18: {r157:SI=r157:SI>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  193: r157:SI=r84:SI
    Inserting insn reload after:
  194: r97:SI=r157:SI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=20,losers=2 -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) v  (1) m {*floatsisf2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) v  (1) m {*floatsisf2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 57:  (0) m  (1) v {*movsf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) v  (1) m {*floatsisf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 59:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) m  (1) rn {*movhi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 70:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) v {fix_truncsfsi_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 86:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 130:  (0) v  (1) m {*floatsisf2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 131:  (0) v  (1) m {*floatsisf2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) x  (1) 0  (2) xm {*fop_sf_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 133:  (0) m  (1) v {*movsf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 134:  (0) v  (1) m {*floatsisf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 135:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) v {fix_truncsfsi_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 162:  (0) x  (1) 0  (2) xm {*fop_sf_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 163:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 164:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7 8
EBB 9 10
EBB 11
EBB 12
EBB 13
EBB 14 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 187: point = 0, n_alt = -1
  BB 14
   Insn 176: point = 0, n_alt = 0
   Insn 175: point = 0, n_alt = -2
   Insn 174: point = 1, n_alt = 3
  BB 8
   Insn 182: point = 2, n_alt = -1
  BB 7
   Insn 94: point = 2, n_alt = -1
   Insn 93: point = 2, n_alt = 1
   Insn 92: point = 3, n_alt = 0
  BB 5
   Insn 179: point = 4, n_alt = -1
   Insn 63: point = 4, n_alt = 1
   Insn 62: point = 5, n_alt = 0
   Insn 61: point = 6, n_alt = 3
   Insn 60: point = 6, n_alt = 3
   Insn 59: point = 6, n_alt = 8
   Insn 58: point = 7, n_alt = 2
   Insn 57: point = 8, n_alt = 8
   Insn 56: point = 9, n_alt = 2
   Insn 55: point = 11, n_alt = 2
   Insn 54: point = 12, n_alt = 2
   Insn 53: point = 13, n_alt = 1
   Insn 52: point = 14, n_alt = 1
   Insn 51: point = 16, n_alt = 0
   Insn 47: point = 17, n_alt = 1
   Insn 46: point = 18, n_alt = 1
   Insn 45: point = 20, n_alt = 0
  BB 4
   Insn 39: point = 21, n_alt = 1
   Insn 38: point = 22, n_alt = 0
   Insn 37: point = 23, n_alt = 1
   Insn 36: point = 24, n_alt = 0
   Insn 35: point = 25, n_alt = 1
   Insn 34: point = 26, n_alt = 0
   Insn 33: point = 27, n_alt = 1
   Insn 32: point = 28, n_alt = 0
   Insn 31: point = 29, n_alt = 1
   Insn 30: point = 30, n_alt = 0
   Insn 29: point = 31, n_alt = 1
   Insn 28: point = 32, n_alt = 0
  BB 3
   Insn 26: point = 33, n_alt = -1
   Insn 25: point = 33, n_alt = 1
   Insn 24: point = 34, n_alt = 0
  BB 6
   Insn 88: point = 35, n_alt = 0
   Insn 87: point = 35, n_alt = 8
   Insn 86: point = 36, n_alt = 1
   Insn 85: point = 38, n_alt = 7
   Insn 84: point = 39, n_alt = 0
   Insn 83: point = 39, n_alt = -2
   Insn 82: point = 40, n_alt = 0
   Insn 81: point = 40, n_alt = -2
   Insn 80: point = 41, n_alt = -2
   Insn 79: point = 42, n_alt = 0
   Insn 78: point = 42, n_alt = -2
   Insn 77: point = 43, n_alt = 3
   Insn 76: point = 44, n_alt = 0
   Insn 75: point = 45, n_alt = 0
   Insn 74: point = 46, n_alt = 3
   Insn 73: point = 47, n_alt = 3
   Insn 72: point = 48, n_alt = 0
   Insn 71: point = 50, n_alt = 0
   Insn 70: point = 52, n_alt = 7
   Insn 69: point = 53, n_alt = 3
   Insn 68: point = 54, n_alt = 0
   Insn 67: point = 56, n_alt = 0
  BB 13
   Insn 170: point = 57, n_alt = -1
   Insn 169: point = 57, n_alt = 1
   Insn 168: point = 58, n_alt = 0
  BB 11
   Insn 184: point = 59, n_alt = -1
   Insn 139: point = 59, n_alt = 1
   Insn 138: point = 60, n_alt = 0
   Insn 137: point = 61, n_alt = 3
   Insn 136: point = 61, n_alt = 3
   Insn 135: point = 61, n_alt = 8
   Insn 134: point = 62, n_alt = 2
   Insn 133: point = 63, n_alt = 8
   Insn 132: point = 64, n_alt = 2
   Insn 131: point = 66, n_alt = 2
   Insn 130: point = 67, n_alt = 2
   Insn 129: point = 68, n_alt = 1
   Insn 128: point = 69, n_alt = 1
   Insn 127: point = 71, n_alt = 0
   Insn 123: point = 72, n_alt = 1
   Insn 122: point = 73, n_alt = 1
   Insn 121: point = 75, n_alt = 0
  BB 10
   Insn 115: point = 76, n_alt = 1
   Insn 114: point = 77, n_alt = 0
   Insn 113: point = 78, n_alt = 1
   Insn 112: point = 79, n_alt = 0
   Insn 111: point = 80, n_alt = 1
   Insn 110: point = 81, n_alt = 0
   Insn 109: point = 82, n_alt = 1
   Insn 108: point = 83, n_alt = 0
   Insn 107: point = 84, n_alt = 1
   Insn 106: point = 85, n_alt = 0
   Insn 105: point = 86, n_alt = 1
   Insn 104: point = 87, n_alt = 0
  BB 9
   Insn 102: point = 88, n_alt = -1
   Insn 101: point = 88, n_alt = 1
   Insn 100: point = 89, n_alt = 0
  BB 2
   Insn 22: point = 90, n_alt = -1
   Insn 21: point = 90, n_alt = 0
   Insn 20: point = 91, n_alt = 0
   Insn 19: point = 93, n_alt = 0
   Insn 194: point = 95, n_alt = -2
	Hard reg 2 is preferable by r157 with profit 1000
   Insn 18: point = 97, n_alt = 1
   Insn 193: point = 98, n_alt = -2
	Hard reg 2 is preferable by r157 with profit 1000
	Hard reg 0 is preferable by r157 with profit 1000
   Insn 17: point = 99, n_alt = 1
   Insn 16: point = 101, n_alt = 0
   Insn 15: point = 102, n_alt = 0
   Insn 192: point = 104, n_alt = -2
	Hard reg 1 is preferable by r156 with profit 1000
   Insn 14: point = 106, n_alt = 0
   Insn 191: point = 107, n_alt = -2
	Hard reg 1 is preferable by r156 with profit 1000
	Hard reg 0 is preferable by r156 with profit 1000
   Insn 190: point = 109, n_alt = -2
	Hard reg 2 is preferable by r155 with profit 1000
   Insn 13: point = 111, n_alt = 1
   Insn 189: point = 112, n_alt = -2
	Hard reg 2 is preferable by r155 with profit 1000
	Hard reg 0 is preferable by r155 with profit 1000
   Insn 12: point = 113, n_alt = 1
   Insn 11: point = 115, n_alt = 0
   Insn 7: point = 116, n_alt = 1
   Insn 6: point = 116, n_alt = 1
   Insn 5: point = 116, n_alt = 1
   Insn 4: point = 116, n_alt = 1
   Insn 3: point = 116, n_alt = 1
   Insn 2: point = 116, n_alt = 5
  BB 12
   Insn 164: point = 116, n_alt = 0
   Insn 163: point = 116, n_alt = 8
   Insn 162: point = 117, n_alt = 1
   Insn 161: point = 119, n_alt = 7
   Insn 160: point = 120, n_alt = 0
   Insn 159: point = 120, n_alt = -2
   Insn 158: point = 121, n_alt = 0
   Insn 157: point = 121, n_alt = -2
   Insn 156: point = 122, n_alt = -2
   Insn 155: point = 123, n_alt = 0
   Insn 154: point = 123, n_alt = -2
   Insn 153: point = 124, n_alt = 3
   Insn 152: point = 125, n_alt = 0
   Insn 151: point = 126, n_alt = 0
   Insn 150: point = 127, n_alt = 3
   Insn 149: point = 128, n_alt = 3
   Insn 148: point = 129, n_alt = 0
   Insn 147: point = 131, n_alt = 0
   Insn 146: point = 132, n_alt = 3
   Insn 145: point = 133, n_alt = 0
   Insn 144: point = 135, n_alt = 0
   Insn 143: point = 137, n_alt = 7
 r82: [108..113]
 r83: [90..104]
 r84: [94..99]
 r85: [90..93]
 r86: [10..12]
 r87: [10..11]
 r88: [53..54]
 r89: [47..48]
 r90: [65..67]
 r91: [65..66]
 r92: [132..133]
 r93: [128..129]
 r94: [114..115]
 r95: [103..109]
 r96: [100..101]
 r97: [92..95]
 r98: [33..34]
 r99: [31..32]
 r100: [29..30]
 r101: [27..28]
 r102: [25..26]
 r103: [23..24]
 r104: [21..22]
 r107: [17..18]
 r108: [19..20]
 r111: [13..14]
 r112: [15..16]
 r113: [8..9]
 r114: [6..7]
 r115: [4..5]
 r116: [55..56]
 r117: [49..50]
 r118: [51..52]
 r119: [42..46]
 r120: [41..45]
 r121: [40..44]
 r122: [39..43]
 r123: [35..36]
 r124: [37..38]
 r125: [2..3]
 r126: [88..89]
 r127: [86..87]
 r128: [84..85]
 r129: [82..83]
 r130: [80..81]
 r131: [78..79]
 r132: [76..77]
 r135: [72..73]
 r136: [74..75]
 r139: [68..69]
 r140: [70..71]
 r141: [63..64]
 r142: [61..62]
 r143: [59..60]
 r144: [134..135]
 r145: [136..137]
 r146: [130..131]
 r147: [123..127]
 r148: [122..126]
 r149: [121..125]
 r150: [120..124]
 r151: [116..117]
 r152: [118..119]
 r153: [57..58]
 r154: [0..1]
 r155: [110..112]
 r156: [105..107]
 r157: [96..98]
Compressing live ranges: from 138 to 116 - 84%
Ranges after the compression:
 r82: [94..97]
 r83: [82..91]
 r84: [84..87]
 r85: [82..83]
 r86: [10..11]
 r87: [10..11]
 r88: [46..47]
 r89: [40..41]
 r90: [58..59]
 r91: [58..59]
 r92: [110..111]
 r93: [106..107]
 r94: [98..99]
 r95: [90..95]
 r96: [88..89]
 r97: [82..85]
 r98: [32..33]
 r99: [30..31]
 r100: [28..29]
 r101: [26..27]
 r102: [24..25]
 r103: [22..23]
 r104: [20..21]
 r107: [16..17]
 r108: [18..19]
 r111: [12..13]
 r112: [14..15]
 r113: [8..9]
 r114: [6..7]
 r115: [4..5]
 r116: [48..49]
 r117: [42..43]
 r118: [44..45]
 r119: [38..39]
 r120: [38..39]
 r121: [38..39]
 r122: [38..39]
 r123: [34..35]
 r124: [36..37]
 r125: [2..3]
 r126: [80..81]
 r127: [78..79]
 r128: [76..77]
 r129: [74..75]
 r130: [72..73]
 r131: [70..71]
 r132: [68..69]
 r135: [64..65]
 r136: [66..67]
 r139: [60..61]
 r140: [62..63]
 r141: [56..57]
 r142: [54..55]
 r143: [52..53]
 r144: [112..113]
 r145: [114..115]
 r146: [108..109]
 r147: [104..105]
 r148: [104..105]
 r149: [104..105]
 r150: [104..105]
 r151: [100..101]
 r152: [102..103]
 r153: [50..51]
 r154: [0..1]
 r155: [96..97]
 r156: [92..93]
 r157: [86..87]

********** Assignment #1: **********

	 Assigning to 155 (cl=GENERAL_REGS, orig=95, freq=3000, tfirst=155, tfreq=3000)...
	   Assign 2 to reload r155 (freq=3000)
	 Assigning to 156 (cl=GENERAL_REGS, orig=82, freq=3000, tfirst=156, tfreq=3000)...
	   Assign 0 to reload r156 (freq=3000)
	 Assigning to 157 (cl=GENERAL_REGS, orig=97, freq=3000, tfirst=157, tfreq=3000)...
	   Assign 2 to reload r157 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=96, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 15
changing reg in insn 21
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 56
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 130
changing reg in insn 132
changing reg in insn 131
changing reg in insn 132
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 46
changing reg in insn 47
changing reg in insn 45
changing reg in insn 46
changing reg in insn 52
changing reg in insn 53
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 71
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 78
changing reg in insn 75
changing reg in insn 80
changing reg in insn 76
changing reg in insn 81
changing reg in insn 77
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 85
changing reg in insn 86
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 122
changing reg in insn 123
changing reg in insn 121
changing reg in insn 122
changing reg in insn 128
changing reg in insn 129
changing reg in insn 127
changing reg in insn 128
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 150
changing reg in insn 154
changing reg in insn 151
changing reg in insn 156
changing reg in insn 152
changing reg in insn 157
changing reg in insn 153
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 161
changing reg in insn 162
changing reg in insn 168
changing reg in insn 169
changing reg in insn 174
changing reg in insn 175
deleting insn with uid = 190.
deleting insn with uid = 191.
deleting insn with uid = 194.
deleting insn with uid = 68.
deleting insn with uid = 72.
deleting insn with uid = 80.
deleting insn with uid = 81.
deleting insn with uid = 145.
deleting insn with uid = 148.
deleting insn with uid = 156.
deleting insn with uid = 157.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 176.


draw_line

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 36 [r8] 37 [r9]
;;  ref usage 	r0={44d,42u} r1={8d,5u} r2={10d,9u} r4={8d,5u} r5={7d,4u} r6={1d,114u} r7={1d,18u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={24d,5u} r18={3d} r19={1d,1u,9e} r20={16d,12u} r21={6d,2u} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={6d,3u} r37={6d,3u} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 550{315d,223u,12e} in 132{129 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 17 [flags] 82 83 84 85 94 95 96 97
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])
        (reg:DI 5 di [ c ])) "draw.c":12:1 66 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [2 drawable+0 S4 A32])
        (reg:SI 4 si [ drawable ])) "draw.c":12:1 67 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 gcontext+0 S4 A32])
        (reg:SI 1 dx [ gcontext ])) "draw.c":12:1 67 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])
        (reg:SI 2 cx [ x1 ])) "draw.c":12:1 67 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])
        (reg:SI 36 r8 [ y1 ])) "draw.c":12:1 67 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
        (reg:SI 37 r9 [ x2 ])) "draw.c":12:1 67 {*movsi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":14:16 67 {*movsi_internal}
     (nil))
(insn 12 11 189 2 (parallel [
            (set (reg:SI 0 ax [orig:82 _1 ] [82])
                (minus:SI (reg:SI 0 ax [94])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:16 254 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))
        (nil)))
(insn 189 12 13 2 (set (reg:SI 2 cx [95])
        (reg:SI 0 ax [orig:82 _1 ] [82])) "draw.c":14:9 67 {*movsi_internal}
     (nil))
(insn 13 189 14 2 (parallel [
            (set (reg:SI 2 cx [95])
                (ashiftrt:SI (reg:SI 2 cx [95])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:9 630 {ashrsi3_cvt}
     (nil))
(insn 14 13 192 2 (parallel [
            (set (reg:SI 0 ax [orig:82 _1 ] [82])
                (xor:SI (reg:SI 0 ax [orig:82 _1 ] [82])
                    (reg:SI 2 cx [95])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:9 481 {*xorsi_1}
     (nil))
(insn 192 14 15 2 (set (reg:SI 1 dx [orig:83 _2 ] [83])
        (reg:SI 0 ax [orig:82 _1 ] [82])) "draw.c":14:9 67 {*movsi_internal}
     (nil))
(insn 15 192 16 2 (parallel [
            (set (reg:SI 1 dx [orig:83 _2 ] [83])
                (minus:SI (reg:SI 1 dx [orig:83 _2 ] [83])
                    (reg:SI 2 cx [95])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:9 254 {*subsi_1}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":14:31 67 {*movsi_internal}
     (nil))
(insn 17 16 193 2 (parallel [
            (set (reg:SI 0 ax [orig:84 _3 ] [84])
                (minus:SI (reg:SI 0 ax [96])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:31 254 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))
        (nil)))
(insn 193 17 18 2 (set (reg:SI 2 cx [97])
        (reg:SI 0 ax [orig:84 _3 ] [84])) "draw.c":14:24 67 {*movsi_internal}
     (nil))
(insn 18 193 19 2 (parallel [
            (set (reg:SI 2 cx [97])
                (ashiftrt:SI (reg:SI 2 cx [97])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:24 630 {ashrsi3_cvt}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [orig:85 _4 ] [85])
                (xor:SI (reg:SI 0 ax [orig:84 _3 ] [84])
                    (reg:SI 2 cx [97])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:24 481 {*xorsi_1}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [orig:85 _4 ] [85])
                (minus:SI (reg:SI 0 ax [orig:85 _4 ] [85])
                    (reg:SI 2 cx [97])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:24 254 {*subsi_1}
     (nil))
(insn 21 20 22 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:83 _2 ] [83])
            (reg:SI 0 ax [orig:85 _4 ] [85]))) "draw.c":14:8 11 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "draw.c":14:8 736 {*jcc}
     (nil)
 -> 98)
;;  succ:       3 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":17:12 67 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [98])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32]))) "draw.c":17:12 11 {*cmpsi_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "draw.c":17:12 736 {*jcc}
     (nil)
 -> 40)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 99 100 101 102 103 104
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":19:17 67 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])
        (reg:SI 0 ax [99])) "draw.c":19:17 67 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":20:16 67 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])
        (reg:SI 0 ax [100])) "draw.c":20:16 67 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])) "draw.c":21:16 67 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
        (reg:SI 0 ax [101])) "draw.c":21:16 67 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":22:18 67 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])
        (reg:SI 0 ax [102])) "draw.c":22:18 67 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":23:16 67 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])
        (reg:SI 0 ax [103])) "draw.c":23:16 67 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])) "draw.c":24:16 67 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])
        (reg:SI 0 ax [104])) "draw.c":24:16 67 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 107 108 111 112 113 114 115
(code_label 40 39 41 5 4 (nil) [1 uses])
(note 41 40 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 41 46 5 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":27:13 67 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg:SI 0 ax [107])
                (minus:SI (reg:SI 0 ax [108])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":27:13 254 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))
        (nil)))
(insn 47 46 51 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 dy+0 S4 A32])
        (reg:SI 0 ax [107])) "draw.c":27:13 67 {*movsi_internal}
     (nil))
(insn 51 47 52 5 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":28:13 67 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (parallel [
            (set (reg:SI 0 ax [111])
                (minus:SI (reg:SI 0 ax [112])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":28:13 254 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))
        (nil)))
(insn 53 52 54 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 dx+0 S4 A32])
        (reg:SI 0 ax [111])) "draw.c":28:13 67 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:SF 20 xmm0 [orig:86 _5 ] [86])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [2 dy+0 S4 A32]))) "draw.c":29:19 165 {*floatsisf2}
     (nil))
(insn 55 54 56 5 (set (reg:SF 21 xmm1 [orig:87 _6 ] [87])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 dx+0 S4 A32]))) "draw.c":29:29 165 {*floatsisf2}
     (nil))
(insn 56 55 57 5 (set (reg:SF 20 xmm0 [113])
        (div:SF (reg:SF 20 xmm0 [orig:86 _5 ] [86])
            (reg:SF 21 xmm1 [orig:87 _6 ] [87]))) "draw.c":29:15 907 {*fop_sf_1}
     (nil))
(insn 57 56 58 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 a+0 S4 A32])
        (reg:SF 20 xmm0 [113])) "draw.c":29:15 112 {*movsf_internal}
     (nil))
(insn 58 57 59 5 (set (reg:SF 20 xmm0 [114])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))) "draw.c":30:15 165 {*floatsisf2}
     (nil))
(insn 59 58 60 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SF 20 xmm0 [114])) "draw.c":30:15 112 {*movsf_internal}
     (nil))
(insn 60 59 61 5 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [5 point[0].x+0 S2 A32])
        (const_int 0 [0])) "draw.c":31:21 68 {*movhi_internal}
     (nil))
(insn 61 60 62 5 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -50 [0xffffffffffffffce])) [5 point[0].y+0 S2 A16])
        (const_int 0 [0])) "draw.c":31:21 68 {*movhi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":33:18 67 {*movsi_internal}
     (nil))
(insn 63 62 179 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])
        (reg:SI 0 ax [115])) "draw.c":33:18 67 {*movsi_internal}
     (nil))
(jump_insn 179 63 180 5 (set (pc)
        (label_ref 89)) "draw.c":33:9 737 {jump}
     (nil)
 -> 89)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 180 179 91)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 89 116 117 118 119 120 121 122 123 124
(code_label 91 180 66 6 6 (nil) [1 uses])
(note 66 91 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 69 6 (set (reg:SI 0 ax [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])) "draw.c":35:24 67 {*movsi_internal}
     (nil))
(insn 69 67 70 6 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [5 point[0].x+0 S2 A32])
        (reg:HI 0 ax [orig:88 _7 ] [88])) "draw.c":35:24 68 {*movhi_internal}
     (nil))
(insn 70 69 71 6 (set (reg:SF 20 xmm0 [118])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "draw.c":36:24 112 {*movsf_internal}
     (nil))
(insn 71 70 73 6 (set (reg:SI 0 ax [117])
        (fix:SI (reg:SF 20 xmm0 [118]))) "draw.c":36:24 146 {fix_truncsfsi_sse}
     (nil))
(insn 73 71 74 6 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -50 [0xffffffffffffffce])) [5 point[0].y+0 S2 A16])
        (reg:HI 0 ax [orig:89 _8 ] [89])) "draw.c":36:24 68 {*movhi_internal}
     (nil))
(insn 74 73 75 6 (parallel [
            (set (reg:DI 4 si [119])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":37:13 186 {*adddi_1}
     (nil))
(insn 75 74 76 6 (set (reg:SI 2 cx [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 gcontext+0 S4 A32])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:SI 1 dx [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [2 drawable+0 S4 A32])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])) "draw.c":37:13 66 {*movdi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:DI 37 r9)
        (reg:DI 4 si [119])) "draw.c":37:13 66 {*movdi_internal}
     (nil))
(insn 79 78 82 6 (set (reg:SI 36 r8)
        (const_int 1 [0x1])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 82 79 83 6 (set (reg:SI 4 si)
        (const_int 0 [0])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 83 82 84 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [122])) "draw.c":37:13 66 {*movdi_internal}
     (nil))
(call_insn 84 83 85 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_poly_point") [flags 0x41]  <function_decl 0x7fa66e9b4600 xcb_poly_point>) [0 xcb_poly_point S1 A8])
            (const_int 0 [0]))) "draw.c":37:13 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 85 84 86 6 (set (reg:SF 20 xmm0 [124])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "draw.c":38:15 112 {*movsf_internal}
     (nil))
(insn 86 85 87 6 (set (reg:SF 20 xmm0 [123])
        (plus:SF (reg:SF 20 xmm0 [124])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 a+0 S4 A32]))) "draw.c":38:15 903 {*fop_sf_comm}
     (nil))
(insn 87 86 88 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SF 20 xmm0 [123])) "draw.c":38:15 112 {*movsf_internal}
     (nil))
(insn 88 87 89 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":33:36 185 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 125
(code_label 89 88 90 7 5 (nil) [1 uses])
(note 90 89 92 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 92 90 93 7 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])) "draw.c":33:9 67 {*movsi_internal}
     (nil))
(insn 93 92 94 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [125])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32]))) "draw.c":33:9 11 {*cmpsi_1}
     (nil))
(jump_insn 94 93 181 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "draw.c":33:9 736 {*jcc}
     (nil)
 -> 91)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 181 94 182 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 182 181 183 8 (set (pc)
        (label_ref 172)) 737 {jump}
     (nil)
 -> 172)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 183 182 98)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 126
(code_label 98 183 99 9 3 (nil) [1 uses])
(note 99 98 100 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 9 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":44:12 67 {*movsi_internal}
     (nil))
(insn 101 100 102 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [126])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 16 [0x10])) [2 y2+0 S4 A64]))) "draw.c":44:12 11 {*cmpsi_1}
     (nil))
(jump_insn 102 101 103 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "draw.c":44:12 736 {*jcc}
     (nil)
 -> 116)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 127 128 129 130 131 132
(note 103 102 104 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 10 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":46:17 67 {*movsi_internal}
     (nil))
(insn 105 104 106 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])
        (reg:SI 0 ax [127])) "draw.c":46:17 67 {*movsi_internal}
     (nil))
(insn 106 105 107 10 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":47:16 67 {*movsi_internal}
     (nil))
(insn 107 106 108 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])
        (reg:SI 0 ax [128])) "draw.c":47:16 67 {*movsi_internal}
     (nil))
(insn 108 107 109 10 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])) "draw.c":48:16 67 {*movsi_internal}
     (nil))
(insn 109 108 110 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
        (reg:SI 0 ax [129])) "draw.c":48:16 67 {*movsi_internal}
     (nil))
(insn 110 109 111 10 (set (reg:SI 0 ax [130])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":49:18 67 {*movsi_internal}
     (nil))
(insn 111 110 112 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])
        (reg:SI 0 ax [130])) "draw.c":49:18 67 {*movsi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":50:16 67 {*movsi_internal}
     (nil))
(insn 113 112 114 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])
        (reg:SI 0 ax [131])) "draw.c":50:16 67 {*movsi_internal}
     (nil))
(insn 114 113 115 10 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])) "draw.c":51:16 67 {*movsi_internal}
     (nil))
(insn 115 114 116 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])
        (reg:SI 0 ax [132])) "draw.c":51:16 67 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 90 91 135 136 139 140 141 142 143
(code_label 116 115 117 11 8 (nil) [1 uses])
(note 117 116 121 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 121 117 122 11 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [2 y2+0 S4 A64])) "draw.c":53:13 67 {*movsi_internal}
     (nil))
(insn 122 121 123 11 (parallel [
            (set (reg:SI 0 ax [135])
                (minus:SI (reg:SI 0 ax [136])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":53:13 254 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))
        (nil)))
(insn 123 122 127 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 dy+0 S4 A32])
        (reg:SI 0 ax [135])) "draw.c":53:13 67 {*movsi_internal}
     (nil))
(insn 127 123 128 11 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":54:13 67 {*movsi_internal}
     (nil))
(insn 128 127 129 11 (parallel [
            (set (reg:SI 0 ax [139])
                (minus:SI (reg:SI 0 ax [140])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":54:13 254 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))
        (nil)))
(insn 129 128 130 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 dx+0 S4 A32])
        (reg:SI 0 ax [139])) "draw.c":54:13 67 {*movsi_internal}
     (nil))
(insn 130 129 131 11 (set (reg:SF 20 xmm0 [orig:90 _9 ] [90])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 dx+0 S4 A32]))) "draw.c":55:19 165 {*floatsisf2}
     (nil))
(insn 131 130 132 11 (set (reg:SF 21 xmm1 [orig:91 _10 ] [91])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 dy+0 S4 A32]))) "draw.c":55:29 165 {*floatsisf2}
     (nil))
(insn 132 131 133 11 (set (reg:SF 20 xmm0 [141])
        (div:SF (reg:SF 20 xmm0 [orig:90 _9 ] [90])
            (reg:SF 21 xmm1 [orig:91 _10 ] [91]))) "draw.c":55:15 907 {*fop_sf_1}
     (nil))
(insn 133 132 134 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 a+0 S4 A32])
        (reg:SF 20 xmm0 [141])) "draw.c":55:15 112 {*movsf_internal}
     (nil))
(insn 134 133 135 11 (set (reg:SF 20 xmm0 [142])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))) "draw.c":56:15 165 {*floatsisf2}
     (nil))
(insn 135 134 136 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SF 20 xmm0 [142])) "draw.c":56:15 112 {*movsf_internal}
     (nil))
(insn 136 135 137 11 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [5 point[0].x+0 S2 A64])
        (const_int 0 [0])) "draw.c":57:21 68 {*movhi_internal}
     (nil))
(insn 137 136 138 11 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -54 [0xffffffffffffffca])) [5 point[0].y+0 S2 A16])
        (const_int 0 [0])) "draw.c":57:21 68 {*movhi_internal}
     (nil))
(insn 138 137 139 11 (set (reg:SI 0 ax [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":59:18 67 {*movsi_internal}
     (nil))
(insn 139 138 184 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])
        (reg:SI 0 ax [143])) "draw.c":59:18 67 {*movsi_internal}
     (nil))
(jump_insn 184 139 185 11 (set (pc)
        (label_ref 165)) "draw.c":59:9 737 {jump}
     (nil)
 -> 165)
;;  succ:       13 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 185 184 167)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 92 93 144 145 146 147 148 149 150 151 152
(code_label 167 185 142 12 10 (nil) [1 uses])
(note 142 167 143 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 12 (set (reg:SF 20 xmm0 [145])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "draw.c":61:24 112 {*movsf_internal}
     (nil))
(insn 144 143 146 12 (set (reg:SI 0 ax [144])
        (fix:SI (reg:SF 20 xmm0 [145]))) "draw.c":61:24 146 {fix_truncsfsi_sse}
     (nil))
(insn 146 144 147 12 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [5 point[0].x+0 S2 A64])
        (reg:HI 0 ax [orig:92 _11 ] [92])) "draw.c":61:24 68 {*movhi_internal}
     (nil))
(insn 147 146 149 12 (set (reg:SI 0 ax [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])) "draw.c":62:24 67 {*movsi_internal}
     (nil))
(insn 149 147 150 12 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -54 [0xffffffffffffffca])) [5 point[0].y+0 S2 A16])
        (reg:HI 0 ax [orig:93 _12 ] [93])) "draw.c":62:24 68 {*movhi_internal}
     (nil))
(insn 150 149 151 12 (parallel [
            (set (reg:DI 4 si [147])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":63:13 186 {*adddi_1}
     (nil))
(insn 151 150 152 12 (set (reg:SI 2 cx [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [2 gcontext+0 S4 A32])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:SI 1 dx [149])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [2 drawable+0 S4 A32])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 153 152 154 12 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])) "draw.c":63:13 66 {*movdi_internal}
     (nil))
(insn 154 153 155 12 (set (reg:DI 37 r9)
        (reg:DI 4 si [147])) "draw.c":63:13 66 {*movdi_internal}
     (nil))
(insn 155 154 158 12 (set (reg:SI 36 r8)
        (const_int 1 [0x1])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 158 155 159 12 (set (reg:SI 4 si)
        (const_int 0 [0])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) "draw.c":63:13 66 {*movdi_internal}
     (nil))
(call_insn 160 159 161 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_poly_point") [flags 0x41]  <function_decl 0x7fa66e9b4600 xcb_poly_point>) [0 xcb_poly_point S1 A8])
            (const_int 0 [0]))) "draw.c":63:13 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 161 160 162 12 (set (reg:SF 20 xmm0 [152])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "draw.c":64:15 112 {*movsf_internal}
     (nil))
(insn 162 161 163 12 (set (reg:SF 20 xmm0 [151])
        (plus:SF (reg:SF 20 xmm0 [152])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [3 a+0 S4 A32]))) "draw.c":64:15 903 {*fop_sf_comm}
     (nil))
(insn 163 162 164 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SF 20 xmm0 [151])) "draw.c":64:15 112 {*movsf_internal}
     (nil))
(insn 164 163 165 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":59:36 185 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 153
(code_label 165 164 166 13 9 (nil) [1 uses])
(note 166 165 168 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 168 166 169 13 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])) "draw.c":59:9 67 {*movsi_internal}
     (nil))
(insn 169 168 170 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [153])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 16 [0x10])) [2 y2+0 S4 A64]))) "draw.c":59:9 11 {*cmpsi_1}
     (nil))
(jump_insn 170 169 172 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 167)
            (pc))) "draw.c":59:9 736 {*jcc}
     (nil)
 -> 167)
;;  succ:       12
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              8 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 154
(code_label 172 170 173 14 7 (nil) [1 uses])
(note 173 172 174 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 14 (set (reg:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])) "draw.c":68:5 66 {*movdi_internal}
     (nil))
(insn 175 174 176 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [154])) "draw.c":68:5 66 {*movdi_internal}
     (nil))
(call_insn 176 175 186 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_flush") [flags 0x41]  <function_decl 0x7fa66ea0e700 xcb_flush>) [0 xcb_flush S1 A8])
            (const_int 0 [0]))) "draw.c":68:5 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14 [always]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 186 176 187 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 187 186 188 15 (const_int 0 [0]) "draw.c":69:1 773 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 188 187 0 NOTE_INSN_DELETED)
