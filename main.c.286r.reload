
;; Function main (main, funcdef_no=6, decl_uid=8740, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=1209,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) o  (1) re {*movti_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 64:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-56)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal} (sp_off=-64)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal} (sp_off=-64)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal} (sp_off=-64)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value} (sp_off=-64)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-64)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 149:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 11
EBB 7
EBB 8 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 164: point = 0, n_alt = -1
   Insn 163: point = 0, n_alt = -2
   Insn 159: point = 1, n_alt = -2
  BB 3
   Insn 166: point = 4, n_alt = -1
   Insn 46: point = 4, n_alt = 0
  BB 9
   Insn 154: point = 5, n_alt = 0
  BB 8
   Insn 152: point = 6, n_alt = -1
   Insn 151: point = 6, n_alt = 1
   Insn 149: point = 6, n_alt = 5
   Insn 148: point = 7, n_alt = -2
   Insn 147: point = 8, n_alt = 0
   Insn 146: point = 8, n_alt = -2
   Insn 145: point = 9, n_alt = 3
  BB 4
   Insn 168: point = 10, n_alt = -1
   Insn 116: point = 10, n_alt = 0
   Insn 115: point = 10, n_alt = -2
   Insn 114: point = 11, n_alt = 3
   Insn 113: point = 12, n_alt = 0
   Insn 112: point = 12, n_alt = -2
   Insn 111: point = 13, n_alt = -2
   Insn 110: point = 14, n_alt = 3
   Insn 109: point = 15, n_alt = 0
   Insn 108: point = 16, n_alt = 0
   Insn 107: point = 16, n_alt = 0
   Insn 106: point = 16, n_alt = -2
   Insn 105: point = 17, n_alt = 0
   Insn 104: point = 17, n_alt = -2
   Insn 103: point = 18, n_alt = -2
   Insn 102: point = 19, n_alt = 0
   Insn 101: point = 19, n_alt = 0
   Insn 100: point = 19, n_alt = 0
   Insn 99: point = 19, n_alt = 0
   Insn 98: point = 19, n_alt = 0
   Insn 97: point = 19, n_alt = 0
   Insn 96: point = 19, n_alt = 0
   Insn 95: point = 20, n_alt = 0
   Insn 94: point = 21, n_alt = 0
   Insn 93: point = 22, n_alt = 0
   Insn 92: point = 23, n_alt = 3
   Insn 91: point = 24, n_alt = 0
   Insn 90: point = 24, n_alt = 3
   Insn 89: point = 25, n_alt = 0
   Insn 88: point = 26, n_alt = 0
   Insn 87: point = 28, n_alt = 3
   Insn 86: point = 29, n_alt = 0
   Insn 85: point = 31, n_alt = 3
   Insn 84: point = 32, n_alt = 1
   Insn 83: point = 32, n_alt = 1
   Insn 82: point = 33, n_alt = 0
   Insn 81: point = 35, n_alt = 3
   Insn 80: point = 36, n_alt = 1
   Insn 79: point = 36, n_alt = 1
   Insn 78: point = 37, n_alt = -2
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 38, n_alt = -2
   Insn 75: point = 39, n_alt = 3
   Insn 74: point = 40, n_alt = 0
   Insn 73: point = 40, n_alt = -2
   Insn 72: point = 41, n_alt = -2
   Insn 71: point = 42, n_alt = -2
   Insn 70: point = 43, n_alt = -2
   Insn 69: point = 44, n_alt = -2
   Insn 68: point = 45, n_alt = 3
   Insn 67: point = 46, n_alt = 0
   Insn 66: point = 47, n_alt = 0
   Insn 65: point = 48, n_alt = 0
   Insn 64: point = 49, n_alt = 3
   Insn 63: point = 50, n_alt = 1
   Insn 62: point = 50, n_alt = 1
   Insn 61: point = 51, n_alt = 0
   Insn 60: point = 53, n_alt = 3
   Insn 59: point = 54, n_alt = 1
   Insn 58: point = 54, n_alt = 1
   Insn 57: point = 55, n_alt = -2
   Insn 56: point = 56, n_alt = 0
   Insn 55: point = 56, n_alt = -2
   Insn 54: point = 57, n_alt = 3
   Insn 53: point = 58, n_alt = 0
   Insn 52: point = 58, n_alt = -2
   Insn 51: point = 59, n_alt = 3
  BB 2
   Insn 44: point = 60, n_alt = -1
   Insn 43: point = 60, n_alt = 1
   Insn 42: point = 60, n_alt = 5
   Insn 41: point = 61, n_alt = -2
   Insn 40: point = 62, n_alt = 0
   Insn 39: point = 62, n_alt = -2
   Insn 38: point = 63, n_alt = -2
   Insn 37: point = 64, n_alt = 2
   Insn 36: point = 64, n_alt = 3
   Insn 35: point = 65, n_alt = -2
   Insn 34: point = 66, n_alt = 0
   Insn 33: point = 66, n_alt = -2
   Insn 32: point = 67, n_alt = -2
   Insn 31: point = 68, n_alt = 0
   Insn 30: point = 68, n_alt = 0
   Insn 29: point = 68, n_alt = 0
   Insn 28: point = 68, n_alt = 3
   Insn 27: point = 69, n_alt = 0
   Insn 26: point = 70, n_alt = 1
   Insn 25: point = 71, n_alt = 0
   Insn 24: point = 73, n_alt = 3
   Insn 23: point = 74, n_alt = 1
   Insn 22: point = 75, n_alt = 0
   Insn 21: point = 77, n_alt = 3
   Insn 20: point = 78, n_alt = 5
   Insn 19: point = 79, n_alt = 3
   Insn 18: point = 80, n_alt = 1
   Insn 17: point = 81, n_alt = -2
   Insn 16: point = 83, n_alt = -2
   Insn 15: point = 84, n_alt = 0
   Insn 14: point = 84, n_alt = -2
   Insn 13: point = 85, n_alt = -2
   Insn 12: point = 86, n_alt = 0
   Insn 11: point = 86, n_alt = -2
   Insn 10: point = 87, n_alt = 3
   Insn 9: point = 88, n_alt = 5
   Insn 8: point = 89, n_alt = -2
   Insn 7: point = 90, n_alt = 0
   Insn 6: point = 90, n_alt = 2
   Insn 5: point = 90, n_alt = 2
  BB 7
   Insn 142: point = 90, n_alt = 0
   Insn 141: point = 90, n_alt = -2
   Insn 140: point = 91, n_alt = 3
  BB 6
   Insn 170: point = 92, n_alt = -1
   Insn 133: point = 92, n_alt = 0
   Insn 132: point = 92, n_alt = -2
   Insn 131: point = 93, n_alt = -2
   Insn 130: point = 94, n_alt = -2
   Insn 129: point = 95, n_alt = 3
   Insn 128: point = 96, n_alt = 0
   Insn 127: point = 97, n_alt = 0
  BB 11
   Insn 174: point = 98, n_alt = -1
  BB 5
   Insn 125: point = 98, n_alt = -1
   Insn 124: point = 98, n_alt = 0
   Insn 123: point = 99, n_alt = 0
   Insn 122: point = 101, n_alt = 0
   Insn 121: point = 103, n_alt = 4
   Insn 120: point = 105, n_alt = 3
 r82: [84..85]
 r83: [50..51]
 r84: [32..33]
 r85: [19..29]
 r86: [18..26]
 r87: [102..103]
 r88: [100..101]
 r89: [98..99]
 r90: [2..5]
 r91: [63..65]
 r92: [0..1]
 r93: [88..89]
 r94: [86..87]
 r95: [82..83]
 r96: [80..81]
 r97: [78..79]
 r98: [76..77]
 r99: [74..75]
 r100: [72..73]
 r101: [70..71]
 r102: [67..69]
 r103: [66..68]
 r104: [62..64]
 r105: [60..61]
 r106: [58..59]
 r107: [56..57]
 r108: [54..55]
 r109: [52..53]
 r110: [44..49]
 r111: [43..48]
 r112: [42..47]
 r113: [41..46]
 r114: [40..45]
 r115: [38..39]
 r116: [36..37]
 r117: [34..35]
 r118: [30..31]
 r119: [27..28]
 r120: [17..25]
 r121: [16..24]
 r122: [22..23]
 r123: [20..21]
 r124: [13..15]
 r125: [12..14]
 r126: [10..11]
 r127: [104..105]
 r128: [94..97]
 r129: [93..96]
 r130: [92..95]
 r131: [90..91]
 r132: [8..9]
 r133: [6..7]
Compressing live ranges: from 106 to 78 - 73%
Ranges after the compression:
 r82: [60..61]
 r83: [30..31]
 r84: [20..21]
 r85: [12..17]
 r86: [12..15]
 r87: [74..75]
 r88: [72..73]
 r89: [70..71]
 r90: [2..3]
 r91: [42..43]
 r92: [0..1]
 r93: [64..65]
 r94: [62..63]
 r95: [58..59]
 r96: [56..57]
 r97: [54..55]
 r98: [52..53]
 r99: [50..51]
 r100: [48..49]
 r101: [46..47]
 r102: [44..45]
 r103: [44..45]
 r104: [42..43]
 r105: [40..41]
 r106: [38..39]
 r107: [36..37]
 r108: [34..35]
 r109: [32..33]
 r110: [28..29]
 r111: [28..29]
 r112: [28..29]
 r113: [28..29]
 r114: [28..29]
 r115: [26..27]
 r116: [24..25]
 r117: [22..23]
 r118: [18..19]
 r119: [16..17]
 r120: [12..15]
 r121: [12..15]
 r122: [14..15]
 r123: [12..13]
 r124: [10..11]
 r125: [10..11]
 r126: [8..9]
 r127: [76..77]
 r128: [68..69]
 r129: [68..69]
 r130: [68..69]
 r131: [66..67]
 r132: [6..7]
 r133: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 61
changing reg in insn 62
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 96
changing reg in insn 88
changing reg in insn 103
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 154
changing reg in insn 46
changing reg in insn 159
changing reg in insn 35
changing reg in insn 38
changing reg in insn 159
changing reg in insn 163
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 28
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 64
changing reg in insn 69
changing reg in insn 65
changing reg in insn 70
changing reg in insn 66
changing reg in insn 71
changing reg in insn 67
changing reg in insn 72
changing reg in insn 68
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 104
changing reg in insn 90
changing reg in insn 106
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 109
changing reg in insn 111
changing reg in insn 110
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 120
changing reg in insn 121
changing reg in insn 127
changing reg in insn 130
changing reg in insn 128
changing reg in insn 131
changing reg in insn 129
changing reg in insn 132
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
deleting insn with uid = 8.
deleting insn with uid = 13.
deleting insn with uid = 16.
deleting insn with uid = 17.
deleting insn with uid = 32.
deleting insn with uid = 41.
deleting insn with uid = 57.
deleting insn with uid = 70.
deleting insn with uid = 71.
deleting insn with uid = 72.
deleting insn with uid = 78.
deleting insn with uid = 103.
deleting insn with uid = 104.
deleting insn with uid = 130.
deleting insn with uid = 148.
deleting insn with uid = 159.
deleting insn with uid = 163.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={46d,38u} r1={23d,7u} r2={21d,5u} r4={24d,8u} r5={34d,18u} r6={1d,60u} r7={10d,43u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={23d,3u} r18={15d} r19={1d,1u} r20={16d} r21={16d} r22={16d} r23={16d} r24={16d} r25={16d} r26={16d} r27={16d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={19d,3u} r37={17d,1u} r38={15d} r39={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} 
;;    total ref usage 1299{1112d,187u,0e} in 121{106 regular + 15 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 91 93 94 95 96 97 98 99 100 101 102 103 104 105
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (const_int 0 [0])) "main.c":22:9 66 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "main.c":22:9 66 {*movdi_internal}
     (nil))
(call_insn 7 6 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_connect") [flags 0x41]  <function_decl 0x7f3c633e8c00 xcb_connect>) [0 xcb_connect S1 A8])
            (const_int 0 [0]))) "main.c":22:9 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 9 7 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])
        (reg:DI 0 ax [93])) "main.c":22:9 66 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":24:37 66 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "main.c":24:37 66 {*movdi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_get_setup") [flags 0x41]  <function_decl 0x7f3c633e8600 xcb_get_setup>) [0 xcb_get_setup S1 A8])
            (const_int 0 [0]))) "main.c":24:37 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 12 15 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "main.c":24:12 66 {*movdi_internal}
     (nil))
(call_insn 15 14 18 2 (set (reg:TI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_setup_roots_iterator") [flags 0x41]  <function_decl 0x7f3c63330100 xcb_setup_roots_iterator>) [0 xcb_setup_roots_iterator S1 A8])
            (const_int 0 [0]))) "main.c":24:12 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 15 19 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [1 iter+0 S16 A64])
        (reg:TI 0 ax [96])) "main.c":24:12 65 {*movti_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 iter.data+0 S8 A64])) "main.c":25:12 66 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 screen+0 S8 A64])
        (reg/f:DI 0 ax [97])) "main.c":25:12 66 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 screen+0 S8 A64])) "main.c":27:14 66 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 0 ax [99])
        (mem:SI (reg/f:DI 0 ax [98]) [3 screen_18->root+0 S4 A32])) "main.c":27:14 67 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 drawable+0 S4 A32])
        (reg:SI 0 ax [99])) "main.c":27:14 67 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 screen+0 S8 A64])) "main.c":29:14 66 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [101])
        (mem:SI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 4 [0x4])) [3 screen_18->default_colormap+0 S4 A32])) "main.c":29:14 67 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 colormap+0 S4 A32])
        (reg:SI 0 ax [101])) "main.c":29:14 67 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 4 si [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 colormap+0 S4 A32])) "main.c":30:18 67 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":30:18 66 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:SI 36 r8)
        (const_int 0 [0])) "main.c":30:18 67 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 2 cx)
        (const_int 65535 [0xffff])) "main.c":30:18 67 {*movsi_internal}
     (nil))
(insn 31 30 33 2 (set (reg:SI 1 dx)
        (const_int 65535 [0xffff])) "main.c":30:18 67 {*movsi_internal}
     (nil))
(insn 33 31 34 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "main.c":30:18 66 {*movdi_internal}
     (nil))
(call_insn 34 33 35 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_alloc_color") [flags 0x41]  <function_decl 0x7f3c633abc00 xcb_alloc_color>) [0 xcb_alloc_color S1 A8])
            (const_int 0 [0]))) "main.c":30:18 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 36 r8))
                        (nil)))))))
(insn 35 34 36 2 (set (reg:SI 2 cx [orig:91 D.8762 ] [91])
        (reg:SI 0 ax)) "main.c":30:18 67 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":30:18 66 {*movdi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "main.c":30:18 66 {*movdi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:91 D.8762 ] [91])) "main.c":30:18 67 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "main.c":30:18 66 {*movdi_internal}
     (nil))
(call_insn 40 39 42 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_alloc_color_reply") [flags 0x41]  <function_decl 0x7f3c633abe00 xcb_alloc_color_reply>) [0 xcb_alloc_color_reply S1 A8])
            (const_int 0 [0]))) "main.c":30:18 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 42 40 43 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 color_info+0 S8 A64])
        (reg:DI 0 ax [105])) "main.c":30:18 66 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [7 color_info+0 S8 A64])
            (const_int 0 [0]))) "main.c":32:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 44 43 45 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "main.c":32:8 736 {*jcc}
     (nil)
 -> 49)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 90
(note 45 44 46 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 166 3 (set (reg:SI 0 ax [orig:90 _9 ] [90])
        (const_int 0 [0])) "main.c":33:16 67 {*movsi_internal}
     (nil))
(jump_insn 166 46 167 3 (set (pc)
        (label_ref 157)) "main.c":33:16 737 {jump}
     (nil)
 -> 157)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90

(barrier 167 166 49)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 86 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126
(code_label 49 167 50 4 2 (nil) [1 uses])
(note 50 49 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 4 (set (reg:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 color_info+0 S8 A64])) "main.c":34:5 66 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) "main.c":34:5 66 {*movdi_internal}
     (nil))
(call_insn 53 52 54 4 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c635aaa00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "main.c":34:5 743 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 53 55 4 (set (reg:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":36:16 66 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) "main.c":36:16 66 {*movdi_internal}
     (nil))
(call_insn 56 55 58 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_generate_id") [flags 0x41]  <function_decl 0x7f3c633e8e00 xcb_generate_id>) [0 xcb_generate_id S1 A8])
            (const_int 0 [0]))) "main.c":36:16 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 58 56 59 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 gcontext+0 S4 A32])
        (reg:SI 0 ax [108])) "main.c":36:16 67 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 mask+0 S4 A32])
        (const_int 65540 [0x10004])) "main.c":37:10 67 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 color_info+0 S8 A64])) "main.c":38:26 66 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:SI 0 ax [orig:83 _2 ] [83])
        (mem:SI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 16 [0x10])) [3 color_info_23->pixel+0 S4 A32])) "main.c":38:26 67 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 value[0]+0 S4 A32])
        (reg:SI 0 ax [orig:83 _2 ] [83])) "main.c":38:14 67 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 value[1]+0 S4 A32])
        (const_int 0 [0])) "main.c":39:14 67 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (parallel [
            (set (reg:DI 5 di [110])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":40:5 186 {*adddi_1}
     (nil))
(insn 65 64 66 4 (set (reg:SI 2 cx [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 mask+0 S4 A32])) "main.c":40:5 67 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 1 dx [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 drawable+0 S4 A32])) "main.c":40:5 67 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 4 si [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 gcontext+0 S4 A32])) "main.c":40:5 67 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":40:5 66 {*movdi_internal}
     (nil))
(insn 69 68 73 4 (set (reg:DI 36 r8)
        (reg:DI 5 di [110])) "main.c":40:5 66 {*movdi_internal}
     (nil))
(insn 73 69 74 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) "main.c":40:5 66 {*movdi_internal}
     (nil))
(call_insn 74 73 75 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_create_gc") [flags 0x41]  <function_decl 0x7f3c6337a100 xcb_create_gc>) [0 xcb_create_gc S1 A8])
            (const_int 0 [0]))) "main.c":40:5 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 75 74 76 4 (set (reg:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":42:16 66 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [115])) "main.c":42:16 66 {*movdi_internal}
     (nil))
(call_insn 77 76 79 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_generate_id") [flags 0x41]  <function_decl 0x7f3c633e8e00 xcb_generate_id>) [0 xcb_generate_id S1 A8])
            (const_int 0 [0]))) "main.c":42:16 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 79 77 80 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 drawable+0 S4 A32])
        (reg:SI 0 ax [116])) "main.c":42:16 67 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 mask+0 S4 A32])
        (const_int 2050 [0x802])) "main.c":44:10 67 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 screen+0 S8 A64])) "main.c":45:22 66 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (mem:SI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 12 [0xc])) [3 screen_18->black_pixel+0 S4 A32])) "main.c":45:22 67 {*movsi_internal}
     (nil))
(insn 83 82 84 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [3 value[0]+0 S4 A32])
        (reg:SI 0 ax [orig:84 _3 ] [84])) "main.c":45:14 67 {*movsi_internal}
     (nil))
(insn 84 83 85 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 value[1]+0 S4 A32])
        (const_int 32768 [0x8000])) "main.c":46:14 67 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 screen+0 S8 A64])) "main.c":48:5 66 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (set (reg:SI 4 si [orig:85 _4 ] [85])
        (mem:SI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 32 [0x20])) [3 screen_18->root_visual+0 S4 A32])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 87 86 88 4 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 screen+0 S8 A64])) "main.c":48:5 66 {*movdi_internal}
     (nil))
(insn 88 87 89 4 (set (reg:SI 2 cx [orig:86 _5 ] [86])
        (mem:SI (reg/f:DI 0 ax [119]) [3 screen_18->root+0 S4 A32])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 89 88 90 4 (set (reg:SI 1 dx [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 drawable+0 S4 A32])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":48:5 66 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 92 91 93 4 (parallel [
            (set (reg:DI 5 di [122])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:5 186 {*adddi_1}
     (nil))
(insn 93 92 94 4 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [11  S8 A64])
        (reg:DI 5 di [122])) "main.c":48:5 42 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 94 93 95 4 (set (reg:SI 5 di [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 mask+0 S4 A32])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [3  S4 A32])
        (reg:SI 5 di [123])) "main.c":48:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 96 95 97 4 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [3  S4 A32])
        (reg:SI 4 si [orig:85 _4 ] [85])) "main.c":48:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 97 96 98 4 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [3  S4 A32])
        (const_int 1 [0x1])) "main.c":48:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 98 97 99 4 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [3  S4 A32])
        (const_int 10 [0xa])) "main.c":48:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 99 98 100 4 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [3  S4 A32])
        (const_int 150 [0x96])) "main.c":48:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 56 [0x38])
        (nil)))
(insn 100 99 101 4 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [3  S4 A32])
        (const_int 150 [0x96])) "main.c":48:5 46 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 64 [0x40])
        (nil)))
(insn 101 100 102 4 (set (reg:SI 37 r9)
        (const_int 0 [0])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 102 101 105 4 (set (reg:SI 36 r8)
        (const_int 0 [0])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 105 102 106 4 (set (reg:SI 4 si)
        (const_int 0 [0])) "main.c":48:5 67 {*movsi_internal}
     (nil))
(insn 106 105 107 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [121])) "main.c":48:5 66 {*movdi_internal}
     (nil))
(call_insn 107 106 108 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_create_window") [flags 0x41]  <function_decl 0x7f3c63330b00 xcb_create_window>) [0 xcb_create_window S1 A8])
            (const_int 64 [0x40]))) "main.c":48:5 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 36 r8))
                        (expr_list:SI (use (reg:SI 37 r9))
                            (nil))))))))
(insn 108 107 109 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":48:5 186 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 109 108 110 4 (set (reg:SI 1 dx [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 drawable+0 S4 A32])) "main.c":59:5 67 {*movsi_internal}
     (nil))
(insn 110 109 111 4 (set (reg:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":59:5 66 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:SI 4 si)
        (reg:SI 1 dx [124])) "main.c":59:5 67 {*movsi_internal}
     (nil))
(insn 112 111 113 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [125])) "main.c":59:5 66 {*movdi_internal}
     (nil))
(call_insn 113 112 114 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_map_window") [flags 0x41]  <function_decl 0x7f3c6333c400 xcb_map_window>) [0 xcb_map_window S1 A8])
            (const_int 0 [0]))) "main.c":59:5 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 114 113 115 4 (set (reg:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":61:5 66 {*movdi_internal}
     (nil))
(insn 115 114 116 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [126])) "main.c":61:5 66 {*movdi_internal}
     (nil))
(call_insn 116 115 168 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_flush") [flags 0x41]  <function_decl 0x7f3c633e2700 xcb_flush>) [0 xcb_flush S1 A8])
            (const_int 0 [0]))) "main.c":61:5 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 168 116 169 4 (set (pc)
        (label_ref 143)) "main.c":63:11 737 {jump}
     (nil)
 -> 143)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 169 168 150)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 87 88 89 127
(code_label 150 169 119 5 7 (nil) [1 uses])
(note 119 150 120 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 5 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 e+0 S8 A64])) "main.c":65:18 66 {*movdi_internal}
     (nil))
(insn 121 120 122 5 (set (reg:QI 0 ax [orig:87 _6 ] [87])
        (mem:QI (reg/f:DI 0 ax [127]) [0 e_40->response_type+0 S1 A32])) "main.c":65:18 69 {*movqi_internal}
     (nil))
(insn 122 121 123 5 (set (reg:SI 0 ax [orig:88 _7 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 _6 ] [87]))) "main.c":65:18 119 {*zero_extendqisi2}
     (nil))
(insn 123 122 124 5 (parallel [
            (set (reg:SI 0 ax [orig:89 _8 ] [89])
                (and:SI (reg:SI 0 ax [orig:88 _7 ] [88])
                    (const_int -129 [0xffffffffffffff7f])))
            (clobber (reg:CC 17 flags))
        ]) "main.c":65:34 456 {*andsi_1}
     (nil))
(insn 124 123 125 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _8 ] [89])
            (const_int 12 [0xc]))) "main.c":65:9 11 {*cmpsi_1}
     (nil))
(jump_insn 125 124 126 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 173)
            (pc))) "main.c":65:9 736 {*jcc}
     (nil)
 -> 173)
;;  succ:       11
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 11, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 128 129 130
(note 126 125 127 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 6 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 gcontext+0 S4 A32])) "main.c":69:13 67 {*movsi_internal}
     (nil))
(insn 128 127 129 6 (set (reg:SI 2 cx [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 drawable+0 S4 A32])) "main.c":69:13 67 {*movsi_internal}
     (nil))
(insn 129 128 131 6 (set (reg:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":69:13 66 {*movdi_internal}
     (nil))
(insn 131 129 132 6 (set (reg:SI 4 si)
        (reg:SI 2 cx [129])) "main.c":69:13 67 {*movsi_internal}
     (nil))
(insn 132 131 133 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "main.c":69:13 66 {*movdi_internal}
     (nil))
(call_insn 133 132 170 6 (call (mem:QI (symbol_ref:DI ("draw_screen") [flags 0x41]  <function_decl 0x7f3c63456200 draw_screen>) [0 draw_screen S1 A8])
        (const_int 0 [0])) "main.c":69:13 743 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(jump_insn 170 133 171 6 (set (pc)
        (label_ref 138)) "main.c":70:13 737 {jump}
     (nil)
 -> 138)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 171 170 173)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 6, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 173 171 172 11 9 (nil) [1 uses])
(note 172 173 174 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 174 172 138 11 (const_int 0 [0]) "main.c":76:13 773 {nop}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 11, next block 8, flags: (RTL, MODIFIED)
;;  pred:       11 [always]  (FALLTHRU)
;;              6 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 131
(code_label 138 174 139 7 6 (nil) [1 uses])
(note 139 138 140 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 7 (set (reg:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 e+0 S8 A64])) "main.c":80:9 66 {*movdi_internal}
     (nil))
(insn 141 140 142 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [131])) "main.c":80:9 66 {*movdi_internal}
     (nil))
(call_insn 142 141 143 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c635aaa00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "main.c":80:9 743 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              4 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 132 133
(code_label 143 142 144 8 4 (nil) [1 uses])
(note 144 143 145 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 8 (set (reg:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 c+0 S8 A64])) "main.c":63:17 66 {*movdi_internal}
     (nil))
(insn 146 145 147 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [132])) "main.c":63:17 66 {*movdi_internal}
     (nil))
(call_insn 147 146 149 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_wait_for_event") [flags 0x41]  <function_decl 0x7f3c633e2a00 xcb_wait_for_event>) [0 xcb_wait_for_event S1 A8])
            (const_int 0 [0]))) "main.c":63:17 754 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 149 147 151 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 e+0 S8 A64])
        (reg:DI 0 ax [133])) "main.c":63:17 66 {*movdi_internal}
     (nil))
(insn 151 149 152 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [8 e+0 S8 A64])
            (const_int 0 [0]))) "main.c":63:11 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 152 151 153 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "main.c":63:11 736 {*jcc}
     (nil)
 -> 150)
;;  succ:       5
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 90
(note 153 152 154 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 157 9 (set (reg:SI 0 ax [orig:90 _9 ] [90])
        (const_int 0 [0])) "main.c":85:12 67 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 90
;; lr  def 	 0 [ax] 92
(code_label 157 154 158 10 8 (nil) [1 uses])
(note 158 157 164 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 164 158 175 10 (use (reg/i:SI 0 ax)) "main.c":86:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 175 164 0 NOTE_INSN_DELETED)
