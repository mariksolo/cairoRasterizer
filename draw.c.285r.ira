
;; Function draw_wireframe_triangle (draw_wireframe_triangle, funcdef_no=6, decl_uid=8745, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 4 n_edges 3 count 4 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 62.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r99,l0) best SIREG, allocno GENERAL_REGS
    r98: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r98,l0) best DREG, allocno GENERAL_REGS
    r97: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r97,l0) best CREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r92,l0) best SIREG, allocno GENERAL_REGS
    r91: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r91,l0) best DREG, allocno GENERAL_REGS
    r90: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r90,l0) best CREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r86,l0) best SIREG, allocno GENERAL_REGS
    r85: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r85,l0) best DREG, allocno GENERAL_REGS
    r84: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r84,l0) best CREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 67(l0): point = 0
   Insn 63(l0): point = 3
   Insn 62(l0): point = 5
   Insn 61(l0): point = 7
   Insn 60(l0): point = 9
   Insn 59(l0): point = 11
   Insn 58(l0): point = 13
   Insn 57(l0): point = 15
   Insn 56(l0): point = 17
   Insn 55(l0): point = 19
   Insn 54(l0): point = 21
   Insn 53(l0): point = 23
   Insn 52(l0): point = 25
   Insn 51(l0): point = 27
   Insn 50(l0): point = 29
   Insn 49(l0): point = 31
   Insn 48(l0): point = 33
   Insn 47(l0): point = 35
   Insn 46(l0): point = 37
   Insn 45(l0): point = 39
   Insn 44(l0): point = 41
   Insn 43(l0): point = 43
   Insn 42(l0): point = 45
   Insn 41(l0): point = 47
   Insn 40(l0): point = 49
   Insn 39(l0): point = 51
   Insn 38(l0): point = 53
   Insn 37(l0): point = 55
   Insn 36(l0): point = 57
   Insn 35(l0): point = 59
   Insn 34(l0): point = 61
   Insn 33(l0): point = 63
   Insn 32(l0): point = 65
   Insn 31(l0): point = 67
   Insn 30(l0): point = 69
   Insn 29(l0): point = 71
   Insn 28(l0): point = 73
   Insn 27(l0): point = 75
   Insn 26(l0): point = 77
   Insn 25(l0): point = 79
   Insn 24(l0): point = 81
   Insn 23(l0): point = 83
   Insn 22(l0): point = 85
   Insn 21(l0): point = 87
   Insn 20(l0): point = 89
   Insn 19(l0): point = 91
   Insn 18(l0): point = 93
   Insn 17(l0): point = 95
   Insn 16(l0): point = 97
   Insn 15(l0): point = 99
   Insn 14(l0): point = 101
   Insn 13(l0): point = 103
   Insn 12(l0): point = 105
   Insn 11(l0): point = 107
   Insn 7(l0): point = 109
   Insn 6(l0): point = 111
   Insn 5(l0): point = 113
   Insn 4(l0): point = 115
   Insn 3(l0): point = 117
   Insn 2(l0): point = 119
 a0(r100): [10..27]
 a1(r99): [12..29]
 a2(r98): [14..31]
 a3(r97): [16..33]
 a4(r96): [18..35]
 a5(r95): [20..37]
 a6(r101): [22..23]
 a7(r93): [46..63]
 a8(r92): [48..65]
 a9(r91): [50..67]
 a10(r90): [52..69]
 a11(r89): [56..71]
 a12(r94): [58..59]
 a13(r87): [80..97]
 a14(r86): [82..99]
 a15(r85): [84..101]
 a16(r84): [86..103]
 a17(r83): [88..105]
 a18(r82): [90..107]
 a19(r88): [92..93]
Compressing live ranges: from 122 to 6 - 4%
Ranges after the compression:
 a0(r100): [0..1]
 a1(r99): [0..1]
 a2(r98): [0..1]
 a3(r97): [0..1]
 a4(r96): [0..1]
 a5(r95): [0..1]
 a6(r101): [0..1]
 a7(r93): [2..3]
 a8(r92): [2..3]
 a9(r91): [2..3]
 a10(r90): [2..3]
 a11(r89): [2..3]
 a12(r94): [2..3]
 a13(r87): [4..5]
 a14(r86): [4..5]
 a15(r85): [4..5]
 a16(r84): [4..5]
 a17(r83): [4..5]
 a18(r82): [4..5]
 a19(r88): [4..5]
  pref0:a0(r100)<-hr5@1500
  pref1:a1(r99)<-hr4@1500
  pref2:a2(r98)<-hr1@1500
  pref3:a3(r97)<-hr2@1500
  pref4:a7(r93)<-hr5@1500
  pref5:a8(r92)<-hr4@1500
  pref6:a9(r91)<-hr1@1500
  pref7:a10(r90)<-hr2@1500
  pref8:a13(r87)<-hr5@1500
  pref9:a14(r86)<-hr4@1500
  pref10:a15(r85)<-hr1@1500
  pref11:a16(r84)<-hr2@1500
  regions=1, blocks=4, points=6
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
   18:r82  l0    37   17:r83  l0    36   16:r84  l0     2   15:r85  l0     1
   14:r86  l0     4   13:r87  l0     0   19:r88  l0     5   11:r89  l0    36
   10:r90  l0     2    9:r91  l0     1    8:r92  l0     4    7:r93  l0     0
   12:r94  l0     5    5:r95  l0    37    4:r96  l0    36    3:r97  l0     2
    2:r98  l0     1    1:r99  l0     4    0:r100 l0     0    6:r101 l0     5
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


draw_wireframe_triangle

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={7d,3u} r1={7d,4u} r2={7d,4u} r4={7d,4u} r5={7d,4u} r6={1d,3u} r7={10d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,8u} r17={9d} r18={3d} r19={1d,24u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={7d,4u} r37={7d,4u} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} 
;;    total ref usage 382{276d,106u,0e} in 60{57 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])
        (reg:DI 5 di [ c ])) "draw.c":5:149 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ c ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])
        (reg:SI 4 si [ drawable ])) "draw.c":5:149 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ drawable ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])
        (reg:SI 1 dx [ gcontext ])) "draw.c":5:149 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ gcontext ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 x1+0 S4 A32])
        (reg:SI 2 cx [ x1 ])) "draw.c":5:149 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ x1 ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 y1+0 S4 A32])
        (reg:SI 36 r8 [ y1 ])) "draw.c":5:149 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 36 r8 [ y1 ])
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 x2+0 S4 A32])
        (reg:SI 37 r9 [ x2 ])) "draw.c":5:149 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r9 [ x2 ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:SI 82)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 x2+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 83)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 y1+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 x1+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 85)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])) "draw.c":6:5 66 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":6:5 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 18 17 19 2 (set (reg:SI 88)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":6:5 67 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [2  S4 A32])
        (reg:SI 88)) "draw.c":6:5 46 {*pushsi2_rex64}
     (expr_list:REG_DEAD (reg:SI 88)
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 20 19 21 2 (set (reg:SI 37 r9)
        (reg:SI 82)) "draw.c":6:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 21 20 22 2 (set (reg:SI 36 r8)
        (reg:SI 83)) "draw.c":6:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83)
        (nil)))
(insn 22 21 23 2 (set (reg:SI 2 cx)
        (reg:SI 84)) "draw.c":6:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84)
        (nil)))
(insn 23 22 24 2 (set (reg:SI 1 dx)
        (reg:SI 85)) "draw.c":6:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85)
        (nil)))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (reg:SI 86)) "draw.c":6:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86)
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 87)) "draw.c":6:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(insn 26 25 27 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "draw.c":6:5 69 {*movqi_internal}
     (nil))
(call_insn 27 26 28 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("draw_line") [flags 0x3]  <function_decl 0x7fa66ea82400 draw_line>) [0 draw_line S1 A8])
            (const_int 16 [0x10]))) "draw.c":6:5 754 {*call_value}
     (expr_list:REG_DEAD (reg:SI 37 r9)
        (expr_list:REG_DEAD (reg:SI 36 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 36 r8))
                            (expr_list:SI (use (reg:SI 37 r9))
                                (nil)))))))))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":6:5 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 29 28 30 2 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [2 x3+0 S4 A64])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 x2+0 S4 A32])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])) "draw.c":7:5 66 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":7:5 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 35 34 36 2 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [2 y3+0 S4 A64])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [2  S4 A32])
        (reg:SI 94)) "draw.c":7:5 46 {*pushsi2_rex64}
     (expr_list:REG_DEAD (reg:SI 94)
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 37 36 38 2 (set (reg:SI 37 r9)
        (reg:SI 89)) "draw.c":7:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 38 37 39 2 (set (reg:SI 36 r8)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":7:5 67 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:SI 2 cx)
        (reg:SI 90)) "draw.c":7:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(insn 40 39 41 2 (set (reg:SI 1 dx)
        (reg:SI 91)) "draw.c":7:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 41 40 42 2 (set (reg:SI 4 si)
        (reg:SI 92)) "draw.c":7:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 42 41 43 2 (set (reg:DI 5 di)
        (reg:DI 93)) "draw.c":7:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(insn 43 42 44 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "draw.c":7:5 69 {*movqi_internal}
     (nil))
(call_insn 44 43 45 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("draw_line") [flags 0x3]  <function_decl 0x7fa66ea82400 draw_line>) [0 draw_line S1 A8])
            (const_int 16 [0x10]))) "draw.c":7:5 754 {*call_value}
     (expr_list:REG_DEAD (reg:SI 37 r9)
        (expr_list:REG_DEAD (reg:SI 36 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 36 r8))
                            (expr_list:SI (use (reg:SI 37 r9))
                                (nil)))))))))
(insn 45 44 46 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":7:5 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 46 45 47 2 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 x1+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [2 y3+0 S4 A64])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:SI 97)
        (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [2 x3+0 S4 A64])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 gcontext+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 drawable+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 c+0 S8 A64])) "draw.c":8:5 66 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":8:5 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 53 52 54 2 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 y1+0 S4 A32])) "draw.c":8:5 67 {*movsi_internal}
     (nil))
(insn 54 53 55 2 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [2  S4 A32])
        (reg:SI 101)) "draw.c":8:5 46 {*pushsi2_rex64}
     (expr_list:REG_DEAD (reg:SI 101)
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 55 54 56 2 (set (reg:SI 37 r9)
        (reg:SI 95)) "draw.c":8:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 95)
        (nil)))
(insn 56 55 57 2 (set (reg:SI 36 r8)
        (reg:SI 96)) "draw.c":8:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 96)
        (nil)))
(insn 57 56 58 2 (set (reg:SI 2 cx)
        (reg:SI 97)) "draw.c":8:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97)
        (nil)))
(insn 58 57 59 2 (set (reg:SI 1 dx)
        (reg:SI 98)) "draw.c":8:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 59 58 60 2 (set (reg:SI 4 si)
        (reg:SI 99)) "draw.c":8:5 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 60 59 61 2 (set (reg:DI 5 di)
        (reg:DI 100)) "draw.c":8:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(insn 61 60 62 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "draw.c":8:5 69 {*movqi_internal}
     (nil))
(call_insn 62 61 63 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("draw_line") [flags 0x3]  <function_decl 0x7fa66ea82400 draw_line>) [0 draw_line S1 A8])
            (const_int 16 [0x10]))) "draw.c":8:5 754 {*call_value}
     (expr_list:REG_DEAD (reg:SI 37 r9)
        (expr_list:REG_DEAD (reg:SI 36 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 36 r8))
                            (expr_list:SI (use (reg:SI 37 r9))
                                (nil)))))))))
(insn 63 62 66 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":8:5 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 66 63 67 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 0 3 (const_int 0 [0]) "draw.c":9:1 773 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function draw_line (draw_line, funcdef_no=7, decl_uid=8747, cgraph_uid=8, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 16 n_edges 20 count 16 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12
;; 2 succs { 3 9 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 14 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 12 14 }
;; 14 succs { 15 }
;; 15 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 176.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a3 (r152,l0) best SSE_REGS, allocno SSE_REGS
    r151: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r151,l0) best SSE_REGS, allocno SSE_REGS
    r150: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r150,l0) best DIREG, allocno GENERAL_REGS
    r149: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r149,l0) best DREG, allocno GENERAL_REGS
    r148: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r148,l0) best CREG, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a12 (r145,l0) best SSE_REGS, allocno SSE_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a14 (r142,l0) best SSE_REGS, allocno SSE_REGS
    r141: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a15 (r141,l0) best SSE_REGS, allocno SSE_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a31 (r124,l0) best SSE_REGS, allocno SSE_REGS
    r123: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a30 (r123,l0) best SSE_REGS, allocno SSE_REGS
    r122: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r122,l0) best DIREG, allocno GENERAL_REGS
    r121: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r121,l0) best DREG, allocno GENERAL_REGS
    r120: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r120,l0) best CREG, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a38 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a42 (r114,l0) best SSE_REGS, allocno SSE_REGS
    r113: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a43 (r113,l0) best SSE_REGS, allocno SSE_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a16 (r91,l0) best SSE_REGS, allocno SSE_REGS
    r90: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a17 (r90,l0) best SSE_REGS, allocno SSE_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a44 (r87,l0) best SSE_REGS, allocno SSE_REGS
    r86: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a45 (r86,l0) best SSE_REGS, allocno SSE_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r154,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r151,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a3(r152,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a4(r150,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r149,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r148,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r147,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a8(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a9(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a10(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a11(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a12(r145,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:18000 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  a13(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r142,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a15(r141,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a16(r91,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a17(r90,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a18(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a19(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a21(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r123,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a31(r124,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a32(r122,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r121,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r120,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r119,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a36(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a37(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a38(r118,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:18000 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  a39(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a40(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a41(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a42(r114,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a43(r113,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:25000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 ALL_REGS:25000 MEM:12000
  a44(r87,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:11000
  a45(r86,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a46(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a47(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a49(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a51(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a56(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a57(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:52000 INT_SSE_REGS:52000 ALL_REGS:848000 MEM:20000
  a58(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:52000 INT_SSE_REGS:52000 ALL_REGS:848000 MEM:20000
  a59(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:27000 INT_SSE_REGS:27000 ALL_REGS:414000 MEM:9000
  a60(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:36000 INT_SSE_REGS:36000 ALL_REGS:528000 MEM:16000
  a61(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a62(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:27000 INT_SSE_REGS:27000 ALL_REGS:414000 MEM:9000
  a63(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:36000 INT_SSE_REGS:36000 ALL_REGS:528000 MEM:16000
  a64(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 187(l0): point = 0
   Insn 176(l0): point = 3
   Insn 175(l0): point = 5
   Insn 174(l0): point = 7
   Insn 164(l0): point = 10
   Insn 163(l0): point = 12
   Insn 162(l0): point = 14
   Insn 161(l0): point = 16
   Insn 160(l0): point = 18
   Insn 159(l0): point = 20
   Insn 158(l0): point = 22
   Insn 157(l0): point = 24
   Insn 156(l0): point = 26
   Insn 155(l0): point = 28
   Insn 154(l0): point = 30
   Insn 153(l0): point = 32
   Insn 152(l0): point = 34
   Insn 151(l0): point = 36
   Insn 150(l0): point = 38
   Insn 149(l0): point = 40
   Insn 148(l0): point = 42
   Insn 147(l0): point = 44
   Insn 146(l0): point = 46
   Insn 145(l0): point = 48
   Insn 144(l0): point = 50
   Insn 143(l0): point = 52
   Insn 170(l0): point = 55
   Insn 169(l0): point = 57
   Insn 168(l0): point = 59
   Insn 184(l0): point = 62
   Insn 139(l0): point = 64
   Insn 138(l0): point = 66
   Insn 137(l0): point = 68
   Insn 136(l0): point = 70
   Insn 135(l0): point = 72
   Insn 134(l0): point = 74
   Insn 133(l0): point = 76
   Insn 132(l0): point = 78
   Insn 131(l0): point = 81
   Insn 130(l0): point = 83
   Insn 129(l0): point = 85
   Insn 128(l0): point = 87
   Insn 127(l0): point = 89
   Insn 123(l0): point = 91
   Insn 122(l0): point = 93
   Insn 121(l0): point = 95
   Insn 115(l0): point = 98
   Insn 114(l0): point = 100
   Insn 113(l0): point = 102
   Insn 112(l0): point = 104
   Insn 111(l0): point = 106
   Insn 110(l0): point = 108
   Insn 109(l0): point = 110
   Insn 108(l0): point = 112
   Insn 107(l0): point = 114
   Insn 106(l0): point = 116
   Insn 105(l0): point = 118
   Insn 104(l0): point = 120
   Insn 102(l0): point = 123
   Insn 101(l0): point = 125
   Insn 100(l0): point = 127
   Insn 182(l0): point = 130
   Insn 88(l0): point = 133
   Insn 87(l0): point = 135
   Insn 86(l0): point = 137
   Insn 85(l0): point = 139
   Insn 84(l0): point = 141
   Insn 83(l0): point = 143
   Insn 82(l0): point = 145
   Insn 81(l0): point = 147
   Insn 80(l0): point = 149
   Insn 79(l0): point = 151
   Insn 78(l0): point = 153
   Insn 77(l0): point = 155
   Insn 76(l0): point = 157
   Insn 75(l0): point = 159
   Insn 74(l0): point = 161
   Insn 73(l0): point = 163
   Insn 72(l0): point = 165
   Insn 71(l0): point = 167
   Insn 70(l0): point = 169
   Insn 69(l0): point = 171
   Insn 68(l0): point = 173
   Insn 67(l0): point = 175
   Insn 94(l0): point = 178
   Insn 93(l0): point = 180
   Insn 92(l0): point = 182
   Insn 179(l0): point = 185
   Insn 63(l0): point = 187
   Insn 62(l0): point = 189
   Insn 61(l0): point = 191
   Insn 60(l0): point = 193
   Insn 59(l0): point = 195
   Insn 58(l0): point = 197
   Insn 57(l0): point = 199
   Insn 56(l0): point = 201
   Insn 55(l0): point = 204
   Insn 54(l0): point = 206
   Insn 53(l0): point = 208
   Insn 52(l0): point = 210
   Insn 51(l0): point = 212
   Insn 47(l0): point = 214
   Insn 46(l0): point = 216
   Insn 45(l0): point = 218
   Insn 39(l0): point = 221
   Insn 38(l0): point = 223
   Insn 37(l0): point = 225
   Insn 36(l0): point = 227
   Insn 35(l0): point = 229
   Insn 34(l0): point = 231
   Insn 33(l0): point = 233
   Insn 32(l0): point = 235
   Insn 31(l0): point = 237
   Insn 30(l0): point = 239
   Insn 29(l0): point = 241
   Insn 28(l0): point = 243
   Insn 26(l0): point = 246
   Insn 25(l0): point = 248
   Insn 24(l0): point = 250
   Insn 22(l0): point = 253
   Insn 21(l0): point = 255
   Insn 20(l0): point = 257
   Insn 19(l0): point = 260
   Insn 18(l0): point = 262
   Insn 17(l0): point = 264
   Insn 16(l0): point = 266
   Insn 15(l0): point = 268
   Insn 14(l0): point = 271
   Insn 13(l0): point = 273
   Insn 12(l0): point = 275
   Insn 11(l0): point = 277
   Insn 7(l0): point = 279
   Insn 6(l0): point = 281
   Insn 5(l0): point = 283
   Insn 4(l0): point = 285
   Insn 3(l0): point = 287
   Insn 2(l0): point = 289
 a0(r154): [6..7]
 a1(r153): [58..59]
 a2(r151): [13..14]
 a3(r152): [15..16]
 a4(r150): [21..32]
 a5(r149): [25..34]
 a6(r148): [27..36]
 a7(r147): [31..38]
 a8(r93): [41..42]
 a9(r146): [43..44]
 a10(r92): [47..48]
 a11(r144): [49..50]
 a12(r145): [51..52]
 a13(r143): [65..66]
 a14(r142): [73..74]
 a15(r141): [77..79]
 a16(r91): [79..81]
 a17(r90): [80..83]
 a18(r139): [86..87]
 a19(r140): [88..89]
 a20(r135): [92..93]
 a21(r136): [94..95]
 a22(r132): [99..100]
 a23(r131): [103..104]
 a24(r130): [107..108]
 a25(r129): [111..112]
 a26(r128): [115..116]
 a27(r127): [119..120]
 a28(r126): [126..127]
 a29(r125): [181..182]
 a30(r123): [136..137]
 a31(r124): [138..139]
 a32(r122): [144..155]
 a33(r121): [148..157]
 a34(r120): [150..159]
 a35(r119): [154..161]
 a36(r89): [164..165]
 a37(r117): [166..167]
 a38(r118): [168..169]
 a39(r88): [172..173]
 a40(r116): [174..175]
 a41(r115): [188..189]
 a42(r114): [196..197]
 a43(r113): [200..202]
 a44(r87): [202..204]
 a45(r86): [203..206]
 a46(r111): [209..210]
 a47(r112): [211..212]
 a48(r107): [215..216]
 a49(r108): [217..218]
 a50(r104): [222..223]
 a51(r103): [226..227]
 a52(r102): [230..231]
 a53(r101): [234..235]
 a54(r100): [238..239]
 a55(r99): [242..243]
 a56(r98): [249..250]
 a57(r85): [256..260]
 a58(r83): [256..271]
 a59(r97): [258..262]
 a60(r84): [261..264]
 a61(r96): [265..266]
 a62(r95): [269..273]
 a63(r82): [272..275]
 a64(r94): [276..277]
Compressing live ranges: from 292 to 110 - 37%
Ranges after the compression:
 a0(r154): [0..1]
 a1(r153): [18..19]
 a2(r151): [2..3]
 a3(r152): [4..5]
 a4(r150): [6..7]
 a5(r149): [6..7]
 a6(r148): [6..7]
 a7(r147): [6..7]
 a8(r93): [8..9]
 a9(r146): [10..11]
 a10(r92): [12..13]
 a11(r144): [14..15]
 a12(r145): [16..17]
 a13(r143): [20..21]
 a14(r142): [22..23]
 a15(r141): [24..25]
 a16(r91): [25..27]
 a17(r90): [26..27]
 a18(r139): [28..29]
 a19(r140): [30..31]
 a20(r135): [32..33]
 a21(r136): [34..35]
 a22(r132): [36..37]
 a23(r131): [38..39]
 a24(r130): [40..41]
 a25(r129): [42..43]
 a26(r128): [44..45]
 a27(r127): [46..47]
 a28(r126): [48..49]
 a29(r125): [66..67]
 a30(r123): [50..51]
 a31(r124): [52..53]
 a32(r122): [54..55]
 a33(r121): [54..55]
 a34(r120): [54..55]
 a35(r119): [54..55]
 a36(r89): [56..57]
 a37(r117): [58..59]
 a38(r118): [60..61]
 a39(r88): [62..63]
 a40(r116): [64..65]
 a41(r115): [68..69]
 a42(r114): [70..71]
 a43(r113): [72..73]
 a44(r87): [73..75]
 a45(r86): [74..75]
 a46(r111): [76..77]
 a47(r112): [78..79]
 a48(r107): [80..81]
 a49(r108): [82..83]
 a50(r104): [84..85]
 a51(r103): [86..87]
 a52(r102): [88..89]
 a53(r101): [90..91]
 a54(r100): [92..93]
 a55(r99): [94..95]
 a56(r98): [96..97]
 a57(r85): [98..99]
 a58(r83): [98..105]
 a59(r97): [98..101]
 a60(r84): [100..101]
 a61(r96): [102..103]
 a62(r95): [104..107]
 a63(r82): [106..107]
 a64(r94): [108..109]
  pref0:a0(r154)<-hr5@1500
  pref1:a4(r150)<-hr5@1500
  pref2:a5(r149)<-hr1@1500
  pref3:a6(r148)<-hr2@1500
  pref4:a32(r122)<-hr5@1500
  pref5:a33(r121)<-hr1@1500
  pref6:a34(r120)<-hr2@1500
  regions=1, blocks=16, points=110
    allocnos=65 (big 0), copies=0, conflicts=0, ranges=65
Disposition:
   63:r82  l0     0   58:r83  l0     1   60:r84  l0     0   57:r85  l0     0
   45:r86  l0    20   44:r87  l0    21   39:r88  l0     0   36:r89  l0     0
   17:r90  l0    20   16:r91  l0    21   10:r92  l0     0    8:r93  l0     0
   64:r94  l0     0   62:r95  l0     2   61:r96  l0     0   59:r97  l0     2
   56:r98  l0     0   55:r99  l0     0   54:r100 l0     0   53:r101 l0     0
   52:r102 l0     0   51:r103 l0     0   50:r104 l0     0   48:r107 l0     0
   49:r108 l0     0   46:r111 l0     0   47:r112 l0     0   43:r113 l0    20
   42:r114 l0    20   41:r115 l0     0   40:r116 l0     0   37:r117 l0     0
   38:r118 l0    20   35:r119 l0     4   34:r120 l0     2   33:r121 l0     1
   32:r122 l0     0   30:r123 l0    20   31:r124 l0    20   29:r125 l0     0
   28:r126 l0     0   27:r127 l0     0   26:r128 l0     0   25:r129 l0     0
   24:r130 l0     0   23:r131 l0     0   22:r132 l0     0   20:r135 l0     0
   21:r136 l0     0   18:r139 l0     0   19:r140 l0     0   15:r141 l0    20
   14:r142 l0    20   13:r143 l0     0   11:r144 l0     0   12:r145 l0    20
    9:r146 l0     0    7:r147 l0     4    6:r148 l0     2    5:r149 l0     1
    4:r150 l0     0    2:r151 l0    20    3:r152 l0    20    1:r153 l0     0
    0:r154 l0     0
+++Costs: overall 5000, reg 5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


draw_line

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8] 37 [r9]
;;  ref usage 	r0={4d} r1={6d,3u} r2={6d,3u} r4={6d,3u} r5={7d,4u} r6={1d,15u} r7={1d,18u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,23u,3e} r17={24d,5u} r18={3d} r19={1d,105u,9e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={6d,3u} r37={6d,3u} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,2u} r83={2d,2u} r84={1d,2u} r85={2d,2u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,2u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r107={1d,1u} r108={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r135={1d,1u} r136={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} 
;;    total ref usage 589{321d,256u,12e} in 137{134 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 17 [flags] 82 83 84 85 94 95 96 97
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])
        (reg:DI 5 di [ c ])) "draw.c":12:1 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ c ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -76 [0xffffffffffffffb4])) [2 drawable+0 S4 A32])
        (reg:SI 4 si [ drawable ])) "draw.c":12:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ drawable ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [2 gcontext+0 S4 A32])
        (reg:SI 1 dx [ gcontext ])) "draw.c":12:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ gcontext ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])
        (reg:SI 2 cx [ x1 ])) "draw.c":12:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ x1 ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])
        (reg:SI 36 r8 [ y1 ])) "draw.c":12:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 36 r8 [ y1 ])
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
        (reg:SI 37 r9 [ x2 ])) "draw.c":12:1 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r9 [ x2 ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":14:16 67 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 82 [ _1 ])
                (minus:SI (reg:SI 94)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:16 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 94)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))
                (nil)))))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 95)
                (ashiftrt:SI (reg:SI 82 [ _1 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:9 630 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 83 [ _2 ])
                (xor:SI (reg:SI 95)
                    (reg:SI 82 [ _1 ])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:9 481 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 83 [ _2 ])
                (minus:SI (reg:SI 83 [ _2 ])
                    (reg:SI 95)))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:9 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 95)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 2 (set (reg:SI 96)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":14:31 67 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 84 [ _3 ])
                (minus:SI (reg:SI 96)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:31 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 96)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))
                (nil)))))
(insn 18 17 19 2 (parallel [
            (set (reg:SI 97)
                (ashiftrt:SI (reg:SI 84 [ _3 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:24 630 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 85 [ _4 ])
                (xor:SI (reg:SI 97)
                    (reg:SI 84 [ _3 ])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:24 481 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 85 [ _4 ])
                (minus:SI (reg:SI 85 [ _4 ])
                    (reg:SI 97)))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":14:24 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 97)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 21 20 22 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 83 [ _2 ])
            (reg:SI 85 [ _4 ]))) "draw.c":14:8 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
        (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
            (nil))))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "draw.c":14:8 736 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 98)
;;  succ:       3 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":17:12 67 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 98)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32]))) "draw.c":17:12 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "draw.c":17:12 736 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 40)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 99 100 101 102 103 104
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":19:17 67 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])
        (reg:SI 99)) "draw.c":19:17 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 30 29 31 4 (set (reg:SI 100)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":20:16 67 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])
        (reg:SI 100)) "draw.c":20:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 32 31 33 4 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])) "draw.c":21:16 67 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
        (reg:SI 101)) "draw.c":21:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101)
        (nil)))
(insn 34 33 35 4 (set (reg:SI 102)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":22:18 67 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])
        (reg:SI 102)) "draw.c":22:18 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102)
        (nil)))
(insn 36 35 37 4 (set (reg:SI 103)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":23:16 67 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])
        (reg:SI 103)) "draw.c":23:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 103)
        (nil)))
(insn 38 37 39 4 (set (reg:SI 104)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 temp+0 S4 A32])) "draw.c":24:16 67 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
        (reg:SI 104)) "draw.c":24:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 104)
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 87 107 108 111 112 113 114 115
(code_label 40 39 41 5 4 (nil) [1 uses])
(note 41 40 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 41 46 5 (set (reg:SI 108)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":27:13 67 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg:SI 107)
                (minus:SI (reg:SI 108)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":27:13 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 108)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))
                (nil)))))
(insn 47 46 51 5 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 dy+0 S4 A32])
        (reg:SI 107)) "draw.c":27:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107)
        (nil)))
(insn 51 47 52 5 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":28:13 67 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (parallel [
            (set (reg:SI 111)
                (minus:SI (reg:SI 112)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":28:13 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 112)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))
                (nil)))))
(insn 53 52 54 5 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -44 [0xffffffffffffffd4])) [2 dx+0 S4 A32])
        (reg:SI 111)) "draw.c":28:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(insn 54 53 55 5 (set (reg:SF 86 [ _5 ])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [2 dy+0 S4 A32]))) "draw.c":29:19 165 {*floatsisf2}
     (nil))
(insn 55 54 56 5 (set (reg:SF 87 [ _6 ])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -44 [0xffffffffffffffd4])) [2 dx+0 S4 A32]))) "draw.c":29:29 165 {*floatsisf2}
     (nil))
(insn 56 55 57 5 (set (reg:SF 113)
        (div:SF (reg:SF 86 [ _5 ])
            (reg:SF 87 [ _6 ]))) "draw.c":29:15 907 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 87 [ _6 ])
        (expr_list:REG_DEAD (reg:SF 86 [ _5 ])
            (nil))))
(insn 57 56 58 5 (set (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 a+0 S4 A32])
        (reg:SF 113)) "draw.c":29:15 112 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 113)
        (nil)))
(insn 58 57 59 5 (set (reg:SF 114)
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))) "draw.c":30:15 165 {*floatsisf2}
     (nil))
(insn 59 58 60 5 (set (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SF 114)) "draw.c":30:15 112 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 114)
        (nil)))
(insn 60 59 61 5 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -52 [0xffffffffffffffcc])) [5 point[0].x+0 S2 A32])
        (const_int 0 [0])) "draw.c":31:21 68 {*movhi_internal}
     (nil))
(insn 61 60 62 5 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -50 [0xffffffffffffffce])) [5 point[0].y+0 S2 A16])
        (const_int 0 [0])) "draw.c":31:21 68 {*movhi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:SI 115)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":33:18 67 {*movsi_internal}
     (nil))
(insn 63 62 179 5 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])
        (reg:SI 115)) "draw.c":33:18 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(jump_insn 179 63 180 5 (set (pc)
        (label_ref 89)) "draw.c":33:9 737 {jump}
     (nil)
 -> 89)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 180 179 91)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 89 116 117 118 119 120 121 122 123 124
(code_label 91 180 66 6 6 (nil) [1 uses])
(note 66 91 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 6 (set (reg:SI 116)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])) "draw.c":35:24 67 {*movsi_internal}
     (nil))
(insn 68 67 69 6 (set (reg:HI 88 [ _7 ])
        (subreg:HI (reg:SI 116) 0)) "draw.c":35:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(insn 69 68 70 6 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -52 [0xffffffffffffffcc])) [5 point[0].x+0 S2 A32])
        (reg:HI 88 [ _7 ])) "draw.c":35:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 88 [ _7 ])
        (nil)))
(insn 70 69 71 6 (set (reg:SF 118)
        (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "draw.c":36:24 112 {*movsf_internal}
     (nil))
(insn 71 70 72 6 (set (reg:SI 117)
        (fix:SI (reg:SF 118))) "draw.c":36:24 146 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 118)
        (nil)))
(insn 72 71 73 6 (set (reg:HI 89 [ _8 ])
        (subreg:HI (reg:SI 117) 0)) "draw.c":36:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 73 72 74 6 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -50 [0xffffffffffffffce])) [5 point[0].y+0 S2 A16])
        (reg:HI 89 [ _8 ])) "draw.c":36:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 89 [ _8 ])
        (nil)))
(insn 74 73 75 6 (parallel [
            (set (reg:DI 119)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":37:13 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 75 74 76 6 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [2 gcontext+0 S4 A32])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:SI 121)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -76 [0xffffffffffffffb4])) [2 drawable+0 S4 A32])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])) "draw.c":37:13 66 {*movdi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:DI 37 r9)
        (reg:DI 119)) "draw.c":37:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 119)
        (nil)))
(insn 79 78 80 6 (set (reg:SI 36 r8)
        (const_int 1 [0x1])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:SI 2 cx)
        (reg:SI 120)) "draw.c":37:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 81 80 82 6 (set (reg:SI 1 dx)
        (reg:SI 121)) "draw.c":37:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 82 81 83 6 (set (reg:SI 4 si)
        (const_int 0 [0])) "draw.c":37:13 67 {*movsi_internal}
     (nil))
(insn 83 82 84 6 (set (reg:DI 5 di)
        (reg:DI 122)) "draw.c":37:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 122)
        (nil)))
(call_insn 84 83 85 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_poly_point") [flags 0x41]  <function_decl 0x7fa66e9b4600 xcb_poly_point>) [0 xcb_poly_point S1 A8])
            (const_int 0 [0]))) "draw.c":37:13 754 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r9)
        (expr_list:REG_DEAD (reg:SI 36 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 85 84 86 6 (set (reg:SF 124)
        (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "draw.c":38:15 112 {*movsf_internal}
     (nil))
(insn 86 85 87 6 (set (reg:SF 123)
        (plus:SF (reg:SF 124)
            (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [3 a+0 S4 A32]))) "draw.c":38:15 903 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 124)
        (nil)))
(insn 87 86 88 6 (set (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SF 123)) "draw.c":38:15 112 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 123)
        (nil)))
(insn 88 87 89 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":33:36 185 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 125
(code_label 89 88 90 7 5 (nil) [1 uses])
(note 90 89 92 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 92 90 93 7 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 x+0 S4 A32])) "draw.c":33:9 67 {*movsi_internal}
     (nil))
(insn 93 92 94 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 125)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32]))) "draw.c":33:9 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(jump_insn 94 93 181 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "draw.c":33:9 736 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 91)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 181 94 182 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 182 181 183 8 (set (pc)
        (label_ref 172)) 737 {jump}
     (nil)
 -> 172)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 183 182 98)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 126
(code_label 98 183 99 9 3 (nil) [1 uses])
(note 99 98 100 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 9 (set (reg:SI 126)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":44:12 67 {*movsi_internal}
     (nil))
(insn 101 100 102 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 126)
            (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64]))) "draw.c":44:12 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 126)
        (nil)))
(jump_insn 102 101 103 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "draw.c":44:12 736 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 116)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 127 128 129 130 131 132
(note 103 102 104 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 10 (set (reg:SI 127)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])) "draw.c":46:17 67 {*movsi_internal}
     (nil))
(insn 105 104 106 10 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])
        (reg:SI 127)) "draw.c":46:17 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 106 105 107 10 (set (reg:SI 128)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":47:16 67 {*movsi_internal}
     (nil))
(insn 107 106 108 10 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])
        (reg:SI 128)) "draw.c":47:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 108 107 109 10 (set (reg:SI 129)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])) "draw.c":48:16 67 {*movsi_internal}
     (nil))
(insn 109 108 110 10 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
        (reg:SI 129)) "draw.c":48:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(insn 110 109 111 10 (set (reg:SI 130)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":49:18 67 {*movsi_internal}
     (nil))
(insn 111 110 112 10 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])
        (reg:SI 130)) "draw.c":49:18 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 130)
        (nil)))
(insn 112 111 113 10 (set (reg:SI 131)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":50:16 67 {*movsi_internal}
     (nil))
(insn 113 112 114 10 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])
        (reg:SI 131)) "draw.c":50:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 131)
        (nil)))
(insn 114 113 115 10 (set (reg:SI 132)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 temp+0 S4 A32])) "draw.c":51:16 67 {*movsi_internal}
     (nil))
(insn 115 114 116 10 (set (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
        (reg:SI 132)) "draw.c":51:16 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 90 91 135 136 139 140 141 142 143
(code_label 116 115 117 11 8 (nil) [1 uses])
(note 117 116 121 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 121 117 122 11 (set (reg:SI 136)
        (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])) "draw.c":53:13 67 {*movsi_internal}
     (nil))
(insn 122 121 123 11 (parallel [
            (set (reg:SI 135)
                (minus:SI (reg:SI 136)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":53:13 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32]))
                (nil)))))
(insn 123 122 127 11 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 dy+0 S4 A32])
        (reg:SI 135)) "draw.c":53:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(insn 127 123 128 11 (set (reg:SI 140)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])) "draw.c":54:13 67 {*movsi_internal}
     (nil))
(insn 128 127 129 11 (parallel [
            (set (reg:SI 139)
                (minus:SI (reg:SI 140)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":54:13 254 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 140)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -92 [0xffffffffffffffa4])) [2 x2+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))
                (nil)))))
(insn 129 128 130 11 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 dx+0 S4 A32])
        (reg:SI 139)) "draw.c":54:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 130 129 131 11 (set (reg:SF 90 [ _9 ])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -28 [0xffffffffffffffe4])) [2 dx+0 S4 A32]))) "draw.c":55:19 165 {*floatsisf2}
     (nil))
(insn 131 130 132 11 (set (reg:SF 91 [ _10 ])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 dy+0 S4 A32]))) "draw.c":55:29 165 {*floatsisf2}
     (nil))
(insn 132 131 133 11 (set (reg:SF 141)
        (div:SF (reg:SF 90 [ _9 ])
            (reg:SF 91 [ _10 ]))) "draw.c":55:15 907 {*fop_sf_1}
     (expr_list:REG_DEAD (reg:SF 91 [ _10 ])
        (expr_list:REG_DEAD (reg:SF 90 [ _9 ])
            (nil))))
(insn 133 132 134 11 (set (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 a+0 S4 A32])
        (reg:SF 141)) "draw.c":55:15 112 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 141)
        (nil)))
(insn 134 133 135 11 (set (reg:SF 142)
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -84 [0xffffffffffffffac])) [2 x1+0 S4 A32]))) "draw.c":56:15 165 {*floatsisf2}
     (nil))
(insn 135 134 136 11 (set (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SF 142)) "draw.c":56:15 112 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 142)
        (nil)))
(insn 136 135 137 11 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [5 point[0].x+0 S2 A64])
        (const_int 0 [0])) "draw.c":57:21 68 {*movhi_internal}
     (nil))
(insn 137 136 138 11 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -54 [0xffffffffffffffca])) [5 point[0].y+0 S2 A16])
        (const_int 0 [0])) "draw.c":57:21 68 {*movhi_internal}
     (nil))
(insn 138 137 139 11 (set (reg:SI 143)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 y1+0 S4 A32])) "draw.c":59:18 67 {*movsi_internal}
     (nil))
(insn 139 138 184 11 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])
        (reg:SI 143)) "draw.c":59:18 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))
(jump_insn 184 139 185 11 (set (pc)
        (label_ref 165)) "draw.c":59:9 737 {jump}
     (nil)
 -> 165)
;;  succ:       13 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 185 184 167)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       13
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 92 93 144 145 146 147 148 149 150 151 152
(code_label 167 185 142 12 10 (nil) [1 uses])
(note 142 167 143 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 12 (set (reg:SF 145)
        (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "draw.c":61:24 112 {*movsf_internal}
     (nil))
(insn 144 143 145 12 (set (reg:SI 144)
        (fix:SI (reg:SF 145))) "draw.c":61:24 146 {fix_truncsfsi_sse}
     (expr_list:REG_DEAD (reg:SF 145)
        (nil)))
(insn 145 144 146 12 (set (reg:HI 92 [ _11 ])
        (subreg:HI (reg:SI 144) 0)) "draw.c":61:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:SI 144)
        (nil)))
(insn 146 145 147 12 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [5 point[0].x+0 S2 A64])
        (reg:HI 92 [ _11 ])) "draw.c":61:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 92 [ _11 ])
        (nil)))
(insn 147 146 148 12 (set (reg:SI 146)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])) "draw.c":62:24 67 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:HI 93 [ _12 ])
        (subreg:HI (reg:SI 146) 0)) "draw.c":62:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 149 148 150 12 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -54 [0xffffffffffffffca])) [5 point[0].y+0 S2 A16])
        (reg:HI 93 [ _12 ])) "draw.c":62:24 68 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 93 [ _12 ])
        (nil)))
(insn 150 149 151 12 (parallel [
            (set (reg:DI 147)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":63:13 186 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 151 150 152 12 (set (reg:SI 148)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [2 gcontext+0 S4 A32])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:SI 149)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -76 [0xffffffffffffffb4])) [2 drawable+0 S4 A32])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 153 152 154 12 (set (reg:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])) "draw.c":63:13 66 {*movdi_internal}
     (nil))
(insn 154 153 155 12 (set (reg:DI 37 r9)
        (reg:DI 147)) "draw.c":63:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 147)
        (nil)))
(insn 155 154 156 12 (set (reg:SI 36 r8)
        (const_int 1 [0x1])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 156 155 157 12 (set (reg:SI 2 cx)
        (reg:SI 148)) "draw.c":63:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 148)
        (nil)))
(insn 157 156 158 12 (set (reg:SI 1 dx)
        (reg:SI 149)) "draw.c":63:13 67 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 149)
        (nil)))
(insn 158 157 159 12 (set (reg:SI 4 si)
        (const_int 0 [0])) "draw.c":63:13 67 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:DI 5 di)
        (reg:DI 150)) "draw.c":63:13 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 150)
        (nil)))
(call_insn 160 159 161 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_poly_point") [flags 0x41]  <function_decl 0x7fa66e9b4600 xcb_poly_point>) [0 xcb_poly_point S1 A8])
            (const_int 0 [0]))) "draw.c":63:13 754 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r9)
        (expr_list:REG_DEAD (reg:SI 36 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_UNUSED (reg:SI 0 ax)
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 36 r8))
                        (expr_list:DI (use (reg:DI 37 r9))
                            (nil))))))))
(insn 161 160 162 12 (set (reg:SF 152)
        (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "draw.c":64:15 112 {*movsf_internal}
     (nil))
(insn 162 161 163 12 (set (reg:SF 151)
        (plus:SF (reg:SF 152)
            (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 a+0 S4 A32]))) "draw.c":64:15 903 {*fop_sf_comm}
     (expr_list:REG_DEAD (reg:SF 152)
        (nil)))
(insn 163 162 164 12 (set (mem/c:SF (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SF 151)) "draw.c":64:15 112 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 151)
        (nil)))
(insn 164 163 165 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "draw.c":59:36 185 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 153
(code_label 165 164 166 13 9 (nil) [1 uses])
(note 166 165 168 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 168 166 169 13 (set (reg:SI 153)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 y+0 S4 A32])) "draw.c":59:9 67 {*movsi_internal}
     (nil))
(insn 169 168 170 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 153)
            (mem/c:SI (reg/f:DI 16 argp) [2 y2+0 S4 A64]))) "draw.c":59:9 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 153)
        (nil)))
(jump_insn 170 169 172 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 167)
            (pc))) "draw.c":59:9 736 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 167)
;;  succ:       12
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              8 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 154
(code_label 172 170 173 14 7 (nil) [1 uses])
(note 173 172 174 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 14 (set (reg:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -72 [0xffffffffffffffb8])) [1 c+0 S8 A64])) "draw.c":68:5 66 {*movdi_internal}
     (nil))
(insn 175 174 176 14 (set (reg:DI 5 di)
        (reg:DI 154)) "draw.c":68:5 66 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154)
        (nil)))
(call_insn 176 175 186 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("xcb_flush") [flags 0x41]  <function_decl 0x7fa66ea0e700 xcb_flush>) [0 xcb_flush S1 A8])
            (const_int 0 [0]))) "draw.c":68:5 754 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL)
;;  pred:       14 [always]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 186 176 187 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 187 186 0 15 (const_int 0 [0]) "draw.c":69:1 773 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

